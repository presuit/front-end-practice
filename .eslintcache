[{"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\index.tsx":"1","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\App.tsx":"2","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\apollo.ts":"3","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedOutRouter.tsx":"4","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedInRouter.tsx":"5","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\LogIn.tsx":"6","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\CreateAccount.tsx":"7","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\NotFound.tsx":"8","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Home.tsx":"9","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\ValidateCode.tsx":"10","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\hooks\\useMe.tsx":"11","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\ProductGridItem.tsx":"12","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\utils.ts":"13"},{"size":474,"mtime":1610371989440,"results":"14","hashOfConfig":"15"},{"size":410,"mtime":1610427390698,"results":"16","hashOfConfig":"15"},{"size":651,"mtime":1610427179696,"results":"17","hashOfConfig":"15"},{"size":592,"mtime":1610367065748,"results":"18","hashOfConfig":"15"},{"size":627,"mtime":1610427730309,"results":"19","hashOfConfig":"15"},{"size":4268,"mtime":1610430787444,"results":"20","hashOfConfig":"15"},{"size":5031,"mtime":1610453045385,"results":"21","hashOfConfig":"15"},{"size":664,"mtime":1610367663751,"results":"22","hashOfConfig":"15"},{"size":3341,"mtime":1610452082145,"results":"23","hashOfConfig":"15"},{"size":2210,"mtime":1610431505480,"results":"24","hashOfConfig":"15"},{"size":338,"mtime":1610428014914,"results":"25","hashOfConfig":"15"},{"size":1761,"mtime":1610456463299,"results":"26","hashOfConfig":"15"},{"size":363,"mtime":1610453934284,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"6h5vn9",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\index.tsx",[],["59","60"],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\App.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\apollo.ts",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedOutRouter.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedInRouter.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\LogIn.tsx",["61","62","63","64"],"import React from \"react\";\r\nimport { gql, useApolloClient, useMutation } from \"@apollo/client\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { logIn, logInVariables } from \"../__generated__/logIn\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { isLoggedIn } from \"../apollo\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { LogInInput } from \"../__generated__/globalTypes\";\r\n\r\nconst LOG_IN_MUTATION = gql`\r\n  mutation logIn($input: LogInInput!) {\r\n    logIn(input: $input) {\r\n      ok\r\n      error\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LogIn = () => {\r\n  const { register, getValues, errors, handleSubmit } = useForm<LogInInput>({\r\n    mode: \"onChange\",\r\n  });\r\n  const onCompleted = (data: logIn) => {\r\n    const {\r\n      logIn: { ok, token },\r\n    } = data;\r\n\r\n    if (ok && token) {\r\n      console.log(token);\r\n      localStorage.setItem(\"token\", token);\r\n      isLoggedIn(true);\r\n      window.location.reload();\r\n    }\r\n  };\r\n  const onClick = () => {\r\n    const { email, password } = getValues();\r\n    logInMutation({\r\n      variables: {\r\n        input: {\r\n          email,\r\n          password,\r\n        },\r\n      },\r\n    });\r\n  };\r\n  const [logInMutation, { data, error: mutationError }] = useMutation<\r\n    logIn,\r\n    logInVariables\r\n  >(LOG_IN_MUTATION, {\r\n    onCompleted,\r\n  });\r\n  return (\r\n    <div className=\" h-screen  bg-indigo-500 flex items-center justify-center\">\r\n      <Helmet>\r\n        <title>로그인 | front-end-practice</title>\r\n      </Helmet>\r\n      <div className=\" max-w-screen-sm  w-full  px-10 pt-10  pb-5  shadow-xl bg-white rounded-md  mx-10 \">\r\n        <form\r\n          onSubmit={handleSubmit(onClick)}\r\n          className=\"flex flex-col w-full \"\r\n        >\r\n          <h2 className=\"mb-5 text-center font-semibold text-2xl text-indigo-600\">\r\n            로그인\r\n          </h2>\r\n          <input\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"이메일은 로그인 하는데 필수적인 요소입니다.\",\r\n              pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n            })}\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"이메일\"\r\n            required\r\n          />\r\n          {errors.email?.types?.pattern && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              이메일 형식이 잘못되었습니다.\r\n            </h4>\r\n          )}\r\n          {errors.email?.message && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.email?.message}\r\n            </h4>\r\n          )}\r\n          <input\r\n            className=\"py-5 px-3  mb-3 w-full focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"비밀번호는 로그인 하는데 필수적인 요소입니다.\",\r\n            })}\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"비밀번호\"\r\n            required\r\n          />\r\n          {errors.password?.message && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.password?.message}\r\n            </h4>\r\n          )}\r\n          <button\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black hover:bg-indigo-700 hover:text-white transition-colors\"\r\n            type=\"submit\"\r\n          >\r\n            로그인\r\n          </button>\r\n          {mutationError && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {mutationError.message}\r\n            </h4>\r\n          )}\r\n        </form>\r\n        <div>\r\n          <h3 className=\"text-center\">\r\n            아직 회원이 아니신가요?{\" \"}\r\n            <Link\r\n              className=\"text-indigo-700 font-semibold hover:underline\"\r\n              to=\"/create-account\"\r\n            >\r\n              여기\r\n            </Link>\r\n            를 눌러 회원가입 하세요!\r\n          </h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\CreateAccount.tsx",["65","66","67"],"import React from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { isLoggedIn } from \"../apollo\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { CreateAccountInput } from \"../__generated__/globalTypes\";\r\nimport {\r\n  createAccount,\r\n  createAccountVariables,\r\n} from \"../__generated__/createAccount\";\r\n\r\nconst CREATE_ACCOUNT_MUTATION = gql`\r\n  mutation createAccount($input: CreateAccountInput!) {\r\n    createAccount(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CreateAccount = () => {\r\n  const history = useHistory();\r\n  const {\r\n    register,\r\n    getValues,\r\n    errors,\r\n    handleSubmit,\r\n  } = useForm<CreateAccountInput>({\r\n    mode: \"onChange\",\r\n  });\r\n  const onClick = () => {\r\n    const { email, password, username } = getValues();\r\n    createAccountMutation({\r\n      variables: {\r\n        input: {\r\n          email,\r\n          password,\r\n          username,\r\n        },\r\n      },\r\n    });\r\n  };\r\n  const onCompleted = (data: createAccount) => {\r\n    const {\r\n      createAccount: { ok },\r\n    } = data;\r\n\r\n    if (ok) {\r\n      alert(\"회원가입 성공! 로그인 해주세요\");\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n  const [createAccountMutation, { data }] = useMutation<\r\n    createAccount,\r\n    createAccountVariables\r\n  >(CREATE_ACCOUNT_MUTATION, {\r\n    onCompleted,\r\n  });\r\n  console.log(data);\r\n\r\n  return (\r\n    <div className=\" h-screen  bg-indigo-500 flex items-center justify-center\">\r\n      <Helmet>\r\n        <title>회원가입 | front-end-practice</title>\r\n      </Helmet>\r\n      <div className=\" max-w-screen-sm w-full   px-10 pt-10  pb-5  shadow-xl bg-white rounded-md  mx-10 \">\r\n        <form\r\n          onSubmit={handleSubmit(onClick)}\r\n          className=\"flex flex-col w-full \"\r\n        >\r\n          <h2 className=\"mb-5 text-center font-semibold text-2xl text-indigo-600\">\r\n            회원가입\r\n          </h2>\r\n          <input\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"이메일은 회원가입 하는데 필수적인 요소입니다.\",\r\n              pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n            })}\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"이메일\"\r\n            required\r\n          />\r\n          {errors.email?.types?.pattern && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              이메일 형식이 잘못되었습니다.\r\n            </h4>\r\n          )}\r\n          {errors.email?.message && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.email?.message}\r\n            </h4>\r\n          )}\r\n          <input\r\n            className=\"py-5 px-3  mb-3 w-full focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"닉네임은 회원가입 하는데 필수적인 요소입니다.\",\r\n            })}\r\n            type=\"text\"\r\n            name=\"username\"\r\n            placeholder=\"닉네임\"\r\n            required\r\n          />\r\n          {errors.username?.message && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.username?.message}\r\n            </h4>\r\n          )}\r\n          <input\r\n            className=\"py-5 px-3  mb-3 w-full focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"비밀번호는 회원가입 하는데 필수적인 요소입니다.\",\r\n            })}\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"비밀번호\"\r\n            required\r\n          />\r\n          {errors.password?.message && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.password?.message}\r\n            </h4>\r\n          )}\r\n          <button\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black hover:bg-indigo-700 hover:text-white transition-colors\"\r\n            type=\"submit\"\r\n          >\r\n            회원가입\r\n          </button>\r\n          {data?.createAccount.error && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {data?.createAccount.error}\r\n            </h4>\r\n          )}\r\n        </form>\r\n        <div>\r\n          <h3 className=\"text-center\">\r\n            이미 회원이신가요?{\" \"}\r\n            <Link\r\n              className=\"text-indigo-700 font-semibold hover:underline\"\r\n              to=\"/\"\r\n            >\r\n              여기\r\n            </Link>\r\n            를 눌러 로그인 하세요!\r\n          </h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\NotFound.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Home.tsx",["68"],"import { gql, useLazyQuery, useQuery } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ProductGridItem } from \"../components/ProductGridItem\";\r\nimport { useMe } from \"../hooks/useMe\";\r\nimport { allProducts } from \"../__generated__/allProducts\";\r\nimport { ConfirmVerificationCodeInput } from \"../__generated__/globalTypes\";\r\n\r\nconst ALL_PRODUCTS_QUERY = gql`\r\n  query allProducts {\r\n    allProducts {\r\n      ok\r\n      error\r\n      products {\r\n        id\r\n        name\r\n        price\r\n        bigImg\r\n        savedAmount\r\n        category {\r\n          id\r\n          name\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Home = () => {\r\n  const history = useHistory();\r\n  const { data: userData, loading: userLoading } = useMe();\r\n  const {\r\n    register,\r\n    getValues,\r\n    handleSubmit,\r\n    errors,\r\n  } = useForm<ConfirmVerificationCodeInput>({ mode: \"onChange\" });\r\n  const {\r\n    data: productsData,\r\n    loading: productsLoading,\r\n  } = useQuery<allProducts>(ALL_PRODUCTS_QUERY);\r\n  const onClick = () => {\r\n    const { code } = getValues();\r\n    history.push(`/validate-code?code=${code}`);\r\n  };\r\n  return (\r\n    <div>\r\n      {!userLoading && userData?.me.user?.isVerified === false && (\r\n        <div className=\"h-screen flex justify-center items-center bg-indigo-500\">\r\n          <div className=\"max-w-screen-sm w-full mx-10 bg-white shadow-xl rounded-md py-12 px-10 sm:mx-0\">\r\n            <h1 className=\"text-center font-semibold text-2xl\">\r\n              받으신 코드를 입력하고, 서비스를 계속 이용해주세요.\r\n            </h1>\r\n            <form\r\n              onSubmit={handleSubmit(onClick)}\r\n              className=\"w-full mt-5 flex flex-col items-end\"\r\n            >\r\n              <input\r\n                ref={register({\r\n                  required: \"코드를 입력해 주세요\",\r\n                })}\r\n                className=\"w-full py-5 px-3 border focus:outline-none focus:border-indigo-600 transition-colors\"\r\n                type=\"text\"\r\n                name=\"code\"\r\n                placeholder=\"코드\"\r\n                required\r\n              />\r\n              {errors.code?.message && (\r\n                <h2 className=\"text-red-500 font-medium text-md my-3\">\r\n                  {errors.code?.message}\r\n                </h2>\r\n              )}\r\n              <button className=\"mt-3 border px-5 py-2  font-medium text-md hover:bg-green-600 hover:text-white transition-colors \">\r\n                확인\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {!userLoading && userData?.me.user?.isVerified === true && (\r\n        <div className=\"bg-indigo-500 md:h-screen\">\r\n          <div className=\"max-w-screen-2xl  mx-16 2xl:mx-auto py-24 grid md:grid-cols-4 gap-10\">\r\n            {!productsLoading &&\r\n              productsData?.allProducts.products?.map((product) => (\r\n                <ProductGridItem\r\n                  key={product.id}\r\n                  name={product.name}\r\n                  price={product.price}\r\n                  bigImg={product.bigImg}\r\n                  savedAmount={product.savedAmount}\r\n                />\r\n              ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\ValidateCode.tsx",["69"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport {\r\n  confirmVerificationCode,\r\n  confirmVerificationCodeVariables,\r\n} from \"../__generated__/confirmVerificationCode\";\r\n\r\nconst CONFIRM_VALIDATION_CODE_MUTATION = gql`\r\n  mutation confirmVerificationCode($input: ConfirmVerificationCodeInput!) {\r\n    confirmVerificationCode(input: $input) {\r\n      ok\r\n      error\r\n      userId\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ValidationCode = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const client = useApolloClient();\r\n  const code = location.search.split(\"?code=\")[1];\r\n  const onCompleted = (data: confirmVerificationCode) => {\r\n    const {\r\n      confirmVerificationCode: { ok, userId },\r\n    } = data;\r\n    if (ok && userId) {\r\n      client.writeFragment({\r\n        id: `User:${userId}`,\r\n        fragment: gql`\r\n          fragment UserVerifCodeFragment on User {\r\n            isVerified\r\n          }\r\n        `,\r\n        data: {\r\n          isVerified: true,\r\n        },\r\n      });\r\n      alert(\"성공적으로 인증 되었습니다.\");\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n  const [confirmVerificationCodeMutation, { loading, data }] = useMutation<\r\n    confirmVerificationCode,\r\n    confirmVerificationCodeVariables\r\n  >(CONFIRM_VALIDATION_CODE_MUTATION, { onCompleted });\r\n  useEffect(() => {\r\n    confirmVerificationCodeMutation({\r\n      variables: {\r\n        input: {\r\n          code,\r\n        },\r\n      },\r\n    });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <div className=\"h-screen flex flex-col justify-center items-center bg-indigo-500\">\r\n        {loading && (\r\n          <h1 className=\"text-white font-semibold text-2xl\">Loading...</h1>\r\n        )}\r\n        {!loading && data?.confirmVerificationCode.error && (\r\n          <>\r\n            <h1 className=\"text-white font-semibold text-2xl\">\r\n              {data?.confirmVerificationCode.error}\r\n            </h1>\r\n            <Link className=\"text-white mt-10\" to=\"/\">\r\n              홈으로 가기\r\n            </Link>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\hooks\\useMe.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\ProductGridItem.tsx",["70"],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\utils.ts",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":2,"column":15,"nodeType":"77","messageId":"78","endLine":2,"endColumn":30},{"ruleId":"75","severity":1,"message":"79","line":47,"column":27,"nodeType":"77","messageId":"78","endLine":47,"endColumn":31},{"ruleId":"80","severity":1,"message":"81","line":70,"column":34,"nodeType":"82","messageId":"83","endLine":70,"endColumn":35,"suggestions":"84"},{"ruleId":"80","severity":1,"message":"81","line":70,"column":59,"nodeType":"82","messageId":"83","endLine":70,"endColumn":60,"suggestions":"85"},{"ruleId":"75","severity":1,"message":"86","line":5,"column":10,"nodeType":"77","messageId":"78","endLine":5,"endColumn":20},{"ruleId":"80","severity":1,"message":"81","line":79,"column":34,"nodeType":"82","messageId":"83","endLine":79,"endColumn":35,"suggestions":"87"},{"ruleId":"80","severity":1,"message":"81","line":79,"column":59,"nodeType":"82","messageId":"83","endLine":79,"endColumn":60,"suggestions":"88"},{"ruleId":"75","severity":1,"message":"89","line":1,"column":15,"nodeType":"77","messageId":"78","endLine":1,"endColumn":27},{"ruleId":"90","severity":1,"message":"91","line":56,"column":6,"nodeType":"92","endLine":56,"endColumn":8,"suggestions":"93"},{"ruleId":"75","severity":1,"message":"94","line":2,"column":10,"nodeType":"77","messageId":"78","endLine":2,"endColumn":27},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"@typescript-eslint/no-unused-vars","'useApolloClient' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["97","98"],["99","100"],"'isLoggedIn' is defined but never used.",["101","102"],["103","104"],"'useLazyQuery' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'code' and 'confirmVerificationCodeMutation'. Either include them or remove the dependency array.","ArrayExpression",["105"],"'pickRandomBgColor' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"106","fix":"107","desc":"108"},{"messageId":"109","fix":"110","desc":"111"},{"messageId":"106","fix":"112","desc":"108"},{"messageId":"109","fix":"113","desc":"111"},{"messageId":"106","fix":"114","desc":"108"},{"messageId":"109","fix":"115","desc":"111"},{"messageId":"106","fix":"116","desc":"108"},{"messageId":"109","fix":"117","desc":"111"},{"desc":"118","fix":"119"},"removeEscape",{"range":"120","text":"121"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"122","text":"123"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"124","text":"121"},{"range":"125","text":"123"},{"range":"126","text":"121"},{"range":"127","text":"123"},{"range":"128","text":"121"},{"range":"129","text":"123"},"Update the dependencies array to be: [code, confirmVerificationCodeMutation]",{"range":"130","text":"131"},[2097,2098],"",[2097,2097],"\\",[2122,2123],[2122,2122],[2231,2232],[2231,2231],[2256,2257],[2256,2256],[1570,1572],"[code, confirmVerificationCodeMutation]"]