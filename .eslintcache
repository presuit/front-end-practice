[{"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\index.tsx":"1","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\App.tsx":"2","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\apollo.ts":"3","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedOutRouter.tsx":"4","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedInRouter.tsx":"5","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\LogIn.tsx":"6","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\CreateAccount.tsx":"7","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\NotFound.tsx":"8","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Home.tsx":"9","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\ValidateCode.tsx":"10","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\hooks\\useMe.tsx":"11","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\ProductGridItem.tsx":"12","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\utils.ts":"13","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\Menu.tsx":"14","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\fragment.ts":"15","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Me.tsx":"16","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Messages.tsx":"17","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\UserProfile.tsx":"18","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\NotValidUser.tsx":"19","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\WalletHistory.tsx":"20","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Product.tsx":"21","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoadingSpinner.tsx":"22","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\CreateProduct.tsx":"23","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\FullSizeImgBoard.tsx":"24","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\SellingHistory.tsx":"25","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\BackButton.tsx":"26","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\__generated__\\globalTypes.ts":"27","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\EditProfile.tsx":"28","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\avatarFullsize.tsx":"29","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\FormError.tsx":"30","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\EditProduct.tsx":"31","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\ImgGrid.tsx":"32","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\constants.ts":"33","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\FormButton.tsx":"34"},{"size":474,"mtime":1610371989440,"results":"35","hashOfConfig":"36"},{"size":410,"mtime":1610937151230,"results":"37","hashOfConfig":"36"},{"size":931,"mtime":1611758381074,"results":"38","hashOfConfig":"36"},{"size":592,"mtime":1610367065748,"results":"39","hashOfConfig":"36"},{"size":3037,"mtime":1611820351568,"results":"40","hashOfConfig":"36"},{"size":4370,"mtime":1611720567598,"results":"41","hashOfConfig":"36"},{"size":5046,"mtime":1611720399755,"results":"42","hashOfConfig":"36"},{"size":668,"mtime":1610891671995,"results":"43","hashOfConfig":"36"},{"size":2449,"mtime":1611898735381,"results":"44","hashOfConfig":"36"},{"size":2333,"mtime":1611721261903,"results":"45","hashOfConfig":"36"},{"size":776,"mtime":1611758625600,"results":"46","hashOfConfig":"36"},{"size":1355,"mtime":1611803350886,"results":"47","hashOfConfig":"36"},{"size":1055,"mtime":1611551730027,"results":"48","hashOfConfig":"36"},{"size":7370,"mtime":1611715905974,"results":"49","hashOfConfig":"36"},{"size":330,"mtime":1611638813089,"results":"50","hashOfConfig":"36"},{"size":12879,"mtime":1611813631869,"results":"51","hashOfConfig":"36"},{"size":420,"mtime":1610628827681,"results":"52","hashOfConfig":"36"},{"size":8256,"mtime":1611802512376,"results":"53","hashOfConfig":"36"},{"size":2514,"mtime":1611721002562,"results":"54","hashOfConfig":"36"},{"size":2024,"mtime":1611148375359,"results":"55","hashOfConfig":"36"},{"size":13093,"mtime":1611849748864,"results":"56","hashOfConfig":"36"},{"size":422,"mtime":1610938247510,"results":"57","hashOfConfig":"36"},{"size":12549,"mtime":1611923639828,"results":"58","hashOfConfig":"36"},{"size":4126,"mtime":1611800621765,"results":"59","hashOfConfig":"36"},{"size":995,"mtime":1611718128697,"results":"60","hashOfConfig":"36"},{"size":601,"mtime":1611920862462,"results":"61","hashOfConfig":"36"},{"size":1587,"mtime":1611896086811,"results":"62","hashOfConfig":"36"},{"size":5479,"mtime":1611755830953,"results":"63","hashOfConfig":"36"},{"size":1273,"mtime":1611801977772,"results":"64","hashOfConfig":"36"},{"size":291,"mtime":1611809202510,"results":"65","hashOfConfig":"36"},{"size":10992,"mtime":1611896687127,"results":"66","hashOfConfig":"36"},{"size":10241,"mtime":1611922831626,"results":"67","hashOfConfig":"36"},{"size":55,"mtime":1611839084493,"results":"68","hashOfConfig":"36"},{"size":889,"mtime":1611917757272,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"6h5vn9",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"72"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"72"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"72"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"72"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"72"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"72"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"72"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"72"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"72"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"72"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\index.tsx",[],["156","157"],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\App.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\apollo.ts",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedOutRouter.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedInRouter.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\LogIn.tsx",["158","159","160","161","162"],"import React from \"react\";\r\nimport { gql, useApolloClient, useMutation } from \"@apollo/client\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { logIn, logInVariables } from \"../__generated__/logIn\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { isLoggedIn } from \"../apollo\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { LogInInput } from \"../__generated__/globalTypes\";\r\nimport { data } from \"autoprefixer\";\r\n\r\nconst LOG_IN_MUTATION = gql`\r\n  mutation logIn($input: LogInInput!) {\r\n    logIn(input: $input) {\r\n      ok\r\n      error\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LogIn = () => {\r\n  const { register, getValues, errors, handleSubmit } = useForm<LogInInput>({\r\n    mode: \"onChange\",\r\n  });\r\n  const onCompleted = (data: logIn) => {\r\n    const {\r\n      logIn: { ok, token, error },\r\n    } = data;\r\n\r\n    if (!ok && error) {\r\n      alert(error);\r\n    }\r\n\r\n    if (ok && token) {\r\n      alert(\"로그인 성공!\");\r\n      localStorage.setItem(\"token\", token);\r\n      window.location.reload();\r\n    }\r\n  };\r\n  const onClick = async () => {\r\n    const { email, password } = getValues();\r\n    await logInMutation({\r\n      variables: {\r\n        input: {\r\n          email,\r\n          password,\r\n        },\r\n      },\r\n    });\r\n  };\r\n  const [logInMutation, { error: mutationError }] = useMutation<\r\n    logIn,\r\n    logInVariables\r\n  >(LOG_IN_MUTATION, {\r\n    onCompleted,\r\n  });\r\n  return (\r\n    <div className=\" min-h-screen   flex items-center justify-center\">\r\n      <Helmet>\r\n        <title>로그인 | front-end-practice</title>\r\n      </Helmet>\r\n      <div className=\" max-w-screen-sm  w-full  px-10 pt-10  pb-5  shadow-xl bg-white rounded-md  mx-10 \">\r\n        <form\r\n          onSubmit={handleSubmit(onClick)}\r\n          className=\"flex flex-col w-full \"\r\n        >\r\n          <h2 className=\"mb-5 text-center font-semibold text-2xl text-indigo-600\">\r\n            로그인\r\n          </h2>\r\n          <input\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"이메일은 로그인 하는데 필수적인 요소입니다.\",\r\n              pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n            })}\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"이메일\"\r\n            required\r\n          />\r\n          {errors.email?.type === \"pattern\" && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              이메일 형식이 잘못되었습니다.\r\n            </h4>\r\n          )}\r\n          {errors.email?.message && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.email?.message}\r\n            </h4>\r\n          )}\r\n          <input\r\n            className=\"py-5 px-3  mb-3 w-full focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"비밀번호는 로그인 하는데 필수적인 요소입니다.\",\r\n            })}\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"비밀번호\"\r\n            required\r\n          />\r\n          {errors.password?.type === \"required\" && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.password?.message}\r\n            </h4>\r\n          )}\r\n          <button\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black hover:bg-indigo-700 hover:text-white transition-colors\"\r\n            type=\"submit\"\r\n          >\r\n            로그인\r\n          </button>\r\n          {}\r\n          {mutationError && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {mutationError}\r\n            </h4>\r\n          )}\r\n        </form>\r\n        <div>\r\n          <h3 className=\"text-center\">\r\n            아직 회원이 아니신가요?{\" \"}\r\n            <Link\r\n              className=\"text-indigo-700 font-semibold hover:underline\"\r\n              to=\"/create-account\"\r\n            >\r\n              여기\r\n            </Link>\r\n            를 눌러 회원가입 하세요!\r\n          </h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\CreateAccount.tsx",["163","164","165"],"import React from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { isLoggedIn } from \"../apollo\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { CreateAccountInput } from \"../__generated__/globalTypes\";\r\nimport {\r\n  createAccount,\r\n  createAccountVariables,\r\n} from \"../__generated__/createAccount\";\r\n\r\nconst CREATE_ACCOUNT_MUTATION = gql`\r\n  mutation createAccount($input: CreateAccountInput!) {\r\n    createAccount(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CreateAccount = () => {\r\n  const history = useHistory();\r\n  const {\r\n    register,\r\n    getValues,\r\n    errors,\r\n    handleSubmit,\r\n  } = useForm<CreateAccountInput>({\r\n    mode: \"onChange\",\r\n  });\r\n  const onClick = () => {\r\n    const { email, password, username } = getValues();\r\n    createAccountMutation({\r\n      variables: {\r\n        input: {\r\n          email,\r\n          password,\r\n          username,\r\n        },\r\n      },\r\n    });\r\n  };\r\n  const onCompleted = (data: createAccount) => {\r\n    const {\r\n      createAccount: { ok, error },\r\n    } = data;\r\n\r\n    if (!ok && error) {\r\n      alert(error);\r\n    }\r\n\r\n    if (ok) {\r\n      alert(\"회원가입 성공! 로그인 해주세요\");\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n  const [createAccountMutation, { error }] = useMutation<\r\n    createAccount,\r\n    createAccountVariables\r\n  >(CREATE_ACCOUNT_MUTATION, {\r\n    onCompleted,\r\n  });\r\n\r\n  return (\r\n    <div className=\" min-h-screen  bg-indigo-500 flex items-center justify-center\">\r\n      <Helmet>\r\n        <title>회원가입 | front-end-practice</title>\r\n      </Helmet>\r\n      <div className=\" max-w-screen-sm w-full   px-10 pt-10  pb-5  shadow-xl bg-white rounded-md  mx-10 \">\r\n        <form\r\n          onSubmit={handleSubmit(onClick)}\r\n          className=\"flex flex-col w-full \"\r\n        >\r\n          <h2 className=\"mb-5 text-center font-semibold text-2xl text-indigo-600\">\r\n            회원가입\r\n          </h2>\r\n          <input\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"이메일은 회원가입 하는데 필수적인 요소입니다.\",\r\n              pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n            })}\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"이메일\"\r\n            required\r\n          />\r\n          {errors.email?.type === \"pattern\" && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              이메일 형식이 잘못되었습니다.\r\n            </h4>\r\n          )}\r\n          {errors.email?.type === \"required\" && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.email?.message}\r\n            </h4>\r\n          )}\r\n          <input\r\n            className=\"py-5 px-3  mb-3 w-full focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"닉네임은 회원가입 하는데 필수적인 요소입니다.\",\r\n            })}\r\n            type=\"text\"\r\n            name=\"username\"\r\n            placeholder=\"닉네임\"\r\n            required\r\n          />\r\n          {errors.username?.type === \"required\" && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.username?.message}\r\n            </h4>\r\n          )}\r\n          <input\r\n            className=\"py-5 px-3  mb-3 w-full focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"비밀번호는 회원가입 하는데 필수적인 요소입니다.\",\r\n            })}\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"비밀번호\"\r\n            required\r\n          />\r\n          {errors.password?.type === \"required\" && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.password?.message}\r\n            </h4>\r\n          )}\r\n          <button\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black hover:bg-indigo-700 hover:text-white transition-colors\"\r\n            type=\"submit\"\r\n          >\r\n            회원가입\r\n          </button>\r\n          {error && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">{error}</h4>\r\n          )}\r\n        </form>\r\n        <div>\r\n          <h3 className=\"text-center\">\r\n            이미 회원이신가요?{\" \"}\r\n            <Link\r\n              className=\"text-indigo-700 font-semibold hover:underline\"\r\n              to=\"/\"\r\n            >\r\n              여기\r\n            </Link>\r\n            를 눌러 로그인 하세요!\r\n          </h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\NotFound.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Home.tsx",["166"],"import { gql, useQuery, useReactiveVar } from \"@apollo/client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { ProductGridItem } from \"../components/ProductGridItem\";\r\nimport { useMe } from \"../hooks/useMe\";\r\nimport {\r\n  allProducts,\r\n  allProductsVariables,\r\n} from \"../__generated__/allProducts\";\r\nimport { PRODUCTS_FRAGMENT } from \"../fragment\";\r\nimport { Menu } from \"../components/Menu\";\r\nimport { currentHomePage } from \"../apollo\";\r\n\r\nconst ALL_PRODUCTS_QUERY = gql`\r\n  query allProducts($input: AllProductsInput!) {\r\n    allProducts(input: $input) {\r\n      ok\r\n      error\r\n      totalResults\r\n      totalPages\r\n      products {\r\n        ...productsParts\r\n      }\r\n    }\r\n  }\r\n\r\n  ${PRODUCTS_FRAGMENT}\r\n`;\r\n\r\nexport const Home = () => {\r\n  const history = useHistory();\r\n  const currentPage = useReactiveVar(currentHomePage);\r\n  const [page, setPage] = useState(currentPage);\r\n  const { data: userData, loading: userLoading } = useMe();\r\n  const {\r\n    data: productsData,\r\n    loading: productsLoading,\r\n    refetch,\r\n    error,\r\n  } = useQuery<allProducts, allProductsVariables>(ALL_PRODUCTS_QUERY, {\r\n    variables: {\r\n      input: {\r\n        page,\r\n      },\r\n    },\r\n  });\r\n  useEffect(() => {\r\n    refetch({ input: { page } });\r\n  }, []);\r\n  if (!userLoading && userData?.me.user?.isVerified === false) {\r\n    history.push(\"/not-valid-user\");\r\n  }\r\n  console.log(productsData, error);\r\n  return (\r\n    <div>\r\n      {!userLoading && userData?.me.user?.isVerified === true && (\r\n        <div>\r\n          <div className=\"max-w-screen-2xl min-h-screen mx-16 2xl:mx-auto pt-10 pb-32 grid  md:grid-cols-4 grid-rows-2 gap-5 \">\r\n            {!productsLoading &&\r\n              productsData?.allProducts.products?.map((product) => (\r\n                <Link key={product.id} to={`/product/${product.id}`}>\r\n                  <ProductGridItem\r\n                    name={product.name}\r\n                    price={product.price}\r\n                    bigImg={product.bigImg}\r\n                    savedAmount={product.savedAmount}\r\n                  />\r\n                </Link>\r\n              ))}\r\n          </div>\r\n          <Menu\r\n            totalPages={productsData?.allProducts.totalPages}\r\n            totalProducts={productsData?.allProducts.totalResults}\r\n            page={page}\r\n            setPage={setPage}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\ValidateCode.tsx",["167"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport {\r\n  confirmVerificationCode,\r\n  confirmVerificationCodeVariables,\r\n} from \"../__generated__/confirmVerificationCode\";\r\n\r\nconst CONFIRM_VALIDATION_CODE_MUTATION = gql`\r\n  mutation confirmVerificationCode($input: ConfirmVerificationCodeInput!) {\r\n    confirmVerificationCode(input: $input) {\r\n      ok\r\n      error\r\n      userId\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ValidationCode = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const client = useApolloClient();\r\n  const code = location.search.split(\"?code=\")[1];\r\n  const onCompleted = (data: confirmVerificationCode) => {\r\n    const {\r\n      confirmVerificationCode: { ok, userId },\r\n    } = data;\r\n    if (ok && userId) {\r\n      client.writeFragment({\r\n        id: `User:${userId}`,\r\n        fragment: gql`\r\n          fragment UserVerifCodeFragment on User {\r\n            isVerified\r\n          }\r\n        `,\r\n        data: {\r\n          isVerified: true,\r\n        },\r\n      });\r\n      alert(\"성공적으로 인증 되었습니다.\");\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n  const [confirmVerificationCodeMutation, { loading, data }] = useMutation<\r\n    confirmVerificationCode,\r\n    confirmVerificationCodeVariables\r\n  >(CONFIRM_VALIDATION_CODE_MUTATION, { onCompleted });\r\n  useEffect(() => {\r\n    confirmVerificationCodeMutation({\r\n      variables: {\r\n        input: {\r\n          code,\r\n        },\r\n      },\r\n    });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <div className=\"min-h-screen flex flex-col justify-center items-center bg-indigo-500\">\r\n        {loading && (\r\n          <h1 className=\"text-white font-semibold text-2xl\">Loading...</h1>\r\n        )}\r\n        {!loading && data?.confirmVerificationCode.error && (\r\n          <div className=\"px-5 py-10 flex flex-col justify-center items-center border mx-3 bg-white rounded-xl\">\r\n            <h1 className=\"text-black font-semibold text-2xl\">\r\n              {data?.confirmVerificationCode.error}\r\n            </h1>\r\n            <Link className=\"text-black mt-10 hover:underline\" to=\"/\">\r\n              홈으로 가기\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\hooks\\useMe.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\ProductGridItem.tsx",["168","169"],"import React, { useEffect, useRef } from \"react\";\r\nimport { getNameSuppressed, numberWithCommas } from \"../utils\";\r\n\r\ninterface IProps {\r\n  name: string;\r\n  price: number;\r\n  bigImg: string | null;\r\n  savedAmount: number;\r\n}\r\n\r\nexport const ProductGridItem: React.FC<IProps> = ({ bigImg, name, price }) => {\r\n  return (\r\n    <div className=\"w-full h-full  shadow-xl \">\r\n      <div className=\" md:w-full md:h-2/3  rounded-t-lg border-8 border-indigo-900 border-b-0 overflow-hidden\">\r\n        <div\r\n          className=\" bg-center bg-cover md:w-full md:h-full py-32 md:py-0 transform hover:scale-125 transition-transform\"\r\n          style={{\r\n            backgroundImage: `url(${bigImg})`,\r\n            transitionDuration: \"0.5s\",\r\n          }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"grid grid-cols-2 md:h-1/3 py-10  md:py-0 rounded-b-lg w-full bg-indigo-800 border-8 border-t-0 border-indigo-900\">\r\n        <h1 className=\"text-amber-300 font-semibold  flex justify-center items-center text-xl md:text-base lg:text-lg xl:text-xl 2xl:text-2xl px-3\">\r\n          {getNameSuppressed(name)}\r\n        </h1>\r\n        <h1 className=\"flex justify-center items-center text-amber-300 font-semibold text-xl md:text-base lg:text-lg xl:text-xl 2xl:text-2xl px-3\">\r\n          {numberWithCommas(price)}원\r\n        </h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\utils.ts",["170","171"],"import { useHistory } from \"react-router-dom\";\r\nimport { useMe } from \"./hooks/useMe\";\r\n\r\nconst colors = [\r\n  \"blugGray\",\r\n  \"coolGray\",\r\n  \"trueGray\",\r\n  \"warmGray\",\r\n  \"orange\",\r\n  \"amber\",\r\n  \"lime\",\r\n  \"emerald\",\r\n  \"teal\",\r\n  \"cyan\",\r\n  \"lightBlue\",\r\n  \"violet\",\r\n  \"fuchsia\",\r\n  \"rose\",\r\n];\r\n\r\nexport const pickRandomBgColor = (): string => {\r\n  const index = Math.floor(Math.random() * colors.length);\r\n  return colors[index];\r\n};\r\n\r\nexport const getDate = (dateNumber: number): string => {\r\n  const dateObj = new Date(dateNumber);\r\n  const dateYear = dateObj.getFullYear();\r\n  const dateMonth = dateObj.getMonth() + 1;\r\n  const dateDate = dateObj.getDate();\r\n  return `${dateYear}년 ${dateMonth}월 ${dateDate}일`;\r\n};\r\n\r\nexport const getNameSuppressed = (name: string): string => {\r\n  let newName = name;\r\n  if (name.length > 10) {\r\n    newName = `${name.substr(0, 10)}...`;\r\n  }\r\n  return newName;\r\n};\r\n\r\nexport const numberWithCommas = (price: number) => {\r\n  return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n};\r\n\r\nexport {};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\Menu.tsx",["172"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faHome,\r\n  faUser,\r\n  faArrowCircleRight,\r\n  faArrowCircleLeft,\r\n  faCommentDots,\r\n  faPlusCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport \"../styles/animation.css\";\r\nimport { currentHomePage } from \"../apollo\";\r\n\r\ninterface IHomeMenuProps {\r\n  totalPages?: number | null;\r\n  totalProducts?: number | null;\r\n  page?: number | null;\r\n  setPage?: React.Dispatch<React.SetStateAction<number>> | null;\r\n}\r\n\r\nexport const Menu: React.FC<IHomeMenuProps> = ({\r\n  totalPages,\r\n  totalProducts,\r\n  page,\r\n  setPage,\r\n}) => {\r\n  const [mode, setMode] = useState<string>(\"\");\r\n  const location = useLocation();\r\n  const menuDiv = useRef<HTMLDivElement>(null);\r\n  const [menuOpen, setMenuOpen] = useState(false);\r\n  const triggerMenu = () => {\r\n    if (menuOpen) {\r\n      //  close It!\r\n      if (menuDiv.current) {\r\n        menuDiv.current.id = \"menuSmall\";\r\n        menuDiv.current.style.pointerEvents = \"none\";\r\n        setTimeout(() => {\r\n          if (menuDiv.current) {\r\n            menuDiv.current.style.pointerEvents = \"inherit\";\r\n          }\r\n        }, 1000);\r\n        setMenuOpen((prev) => !prev);\r\n      }\r\n    } else {\r\n      //  Open it!\r\n      if (menuDiv.current) {\r\n        menuDiv.current.id = \"menuBig\";\r\n        menuDiv.current.style.pointerEvents = \"none\";\r\n        setTimeout(() => {\r\n          if (menuDiv.current) {\r\n            menuDiv.current.style.pointerEvents = \"inherit\";\r\n          }\r\n        }, 1000);\r\n        setTimeout(() => {\r\n          setMenuOpen((prev) => !prev);\r\n        }, 500);\r\n      }\r\n    }\r\n  };\r\n  const onClickMovePage = (e: any) => {\r\n    if (totalPages && totalProducts && page && setPage) {\r\n      let target = e.target;\r\n      if (e.target.tagName === \"path\") {\r\n        target = e.target.parentNode;\r\n      }\r\n      const targetIconAhead = target.getAttribute(\"data-icon\").split(\"-\")[2];\r\n      if (targetIconAhead === \"right\") {\r\n        if (page < totalPages) {\r\n          setPage((prev) => prev + 1);\r\n          currentHomePage(page + 1);\r\n        }\r\n      }\r\n      if (targetIconAhead === \"left\") {\r\n        if (page > 1) {\r\n          setPage((prev) => prev - 1);\r\n          currentHomePage(page - 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const path = location.pathname;\r\n    if (path === \"/\") {\r\n      setMode(\"home\");\r\n    }\r\n    if (path === \"/me\") {\r\n      setMode(\"me\");\r\n    }\r\n    if (path === \"/messages\") {\r\n      setMode(\"messages\");\r\n    }\r\n    triggerMenu();\r\n  }, [location]);\r\n  return (\r\n    <div className=\" flex justify-center items-center max-w-screen-md  mx-16 md:mx-auto fixed bottom-0 left-0 right-0  \">\r\n      <div\r\n        ref={menuDiv}\r\n        className=\"md:px-12 px-10 py-5 my-5   flex items-center justify-around  shadow-2xl bg-amber-300  rounded-full  \"\r\n      >\r\n        {mode === \"home\" && (\r\n          <>\r\n            {menuOpen && (\r\n              <Link to=\"/messages\">\r\n                <FontAwesomeIcon\r\n                  icon={faCommentDots}\r\n                  className=\"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n                />\r\n              </Link>\r\n            )}\r\n            {menuOpen && (\r\n              <FontAwesomeIcon\r\n                onClick={onClickMovePage}\r\n                icon={faArrowCircleLeft}\r\n                className=\"text-3xl text-indigo-400 cursor-pointer md:text-4xl slowToShow\"\r\n              />\r\n            )}\r\n            {!menuOpen && (\r\n              <FontAwesomeIcon\r\n                onClick={triggerMenu}\r\n                icon={faHome}\r\n                className=\"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n              />\r\n            )}\r\n            {menuOpen && (\r\n              <h1\r\n                onClick={triggerMenu}\r\n                className=\"text-3xl text-indigo-400 cursor-pointer md:text-4xl slowToShow  \"\r\n              >\r\n                {page}\r\n              </h1>\r\n            )}\r\n            {menuOpen && (\r\n              <FontAwesomeIcon\r\n                onClick={onClickMovePage}\r\n                icon={faArrowCircleRight}\r\n                className=\"text-3xl text-indigo-400 cursor-pointer md:text-4xl slowToShow\"\r\n              />\r\n            )}\r\n            {menuOpen && (\r\n              <Link to={`/me`}>\r\n                <FontAwesomeIcon\r\n                  icon={faUser}\r\n                  className=\"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n                />\r\n              </Link>\r\n            )}\r\n          </>\r\n        )}\r\n        {mode === \"me\" && (\r\n          <>\r\n            {menuOpen && (\r\n              <Link to=\"/messages\">\r\n                <FontAwesomeIcon\r\n                  icon={faCommentDots}\r\n                  className=\"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n                />\r\n              </Link>\r\n            )}\r\n            {menuOpen && (\r\n              <FontAwesomeIcon\r\n                icon={faUser}\r\n                onClick={triggerMenu}\r\n                className=\"text-3xl text-indigo-400 cursor-pointer md:text-4xl slowToShow\"\r\n              />\r\n            )}\r\n            {!menuOpen && (\r\n              <FontAwesomeIcon\r\n                icon={faUser}\r\n                onClick={triggerMenu}\r\n                className=\"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n              />\r\n            )}\r\n            {menuOpen && (\r\n              <Link to=\"/\">\r\n                <FontAwesomeIcon\r\n                  icon={faHome}\r\n                  className=\"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n                />\r\n              </Link>\r\n            )}\r\n          </>\r\n        )}\r\n        {mode === \"messages\" && (\r\n          <>\r\n            {menuOpen && (\r\n              <Link to=\"/\">\r\n                <FontAwesomeIcon\r\n                  icon={faHome}\r\n                  className=\"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n                />\r\n              </Link>\r\n            )}\r\n            {menuOpen && (\r\n              <FontAwesomeIcon\r\n                icon={faCommentDots}\r\n                onClick={triggerMenu}\r\n                className=\"text-3xl text-indigo-400 cursor-pointer md:text-4xl slowToShow\"\r\n              />\r\n            )}\r\n            {!menuOpen && (\r\n              <FontAwesomeIcon\r\n                icon={faCommentDots}\r\n                onClick={triggerMenu}\r\n                className=\"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n              />\r\n            )}\r\n            {menuOpen && (\r\n              <Link to=\"/me\">\r\n                <FontAwesomeIcon\r\n                  icon={faUser}\r\n                  className=\"text-3xl text-indigo-100 cursor-pointer md:text-4xl slowToShow\"\r\n                />\r\n              </Link>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n      {mode === \"home\" && (\r\n        <div className=\"fixed bottom-0 right-0\">\r\n          <Link to=\"/product/new\">\r\n            <FontAwesomeIcon\r\n              icon={faPlusCircle}\r\n              className=\"mr-2 md:mr-5 mb-7 2xl:mr-10 text-5xl text-indigo-800 transform hover:scale-125 transition-transform\"\r\n            />\r\n          </Link>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\fragment.ts",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Me.tsx",["173","174","175","176"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Menu } from \"../components/Menu\";\r\nimport { useMe, useMyWallet } from \"../hooks/useMe\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faAt,\r\n  faCheck,\r\n  faUserCircle,\r\n  faTimes,\r\n  faPlus,\r\n  faUserTimes,\r\n  faEdit,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { WalletHistory } from \"../components/WalletHistory\";\r\nimport { gql, useLazyQuery, useReactiveVar } from \"@apollo/client\";\r\nimport { currentMeMenu } from \"../apollo\";\r\nimport { numberWithCommas } from \"../utils\";\r\nimport { SellingHistory } from \"../components/SellingHistory\";\r\nimport { LoadingSpinner } from \"../components/LoadingSpinner\";\r\nimport {\r\n  userSellingHistory,\r\n  userSellingHistoryVariables,\r\n} from \"../__generated__/userSellingHistory\";\r\nimport { AvatarFullsize } from \"../components/avatarFullsize\";\r\n\r\nexport enum MeMenus {\r\n  UsernameMenu = \"meUsernameMenu\",\r\n  BuyingHistoryMenu = \"meBuyingHistoryMenu\",\r\n  SellingHistoryMenu = \"meSellingHistoryMenu\",\r\n}\r\n\r\nconst USER_SELLING_HISTORY_QUERY = gql`\r\n  query userSellingHistory($input: FindUserByIdInput!) {\r\n    findUserById(input: $input) {\r\n      ok\r\n      error\r\n      user {\r\n        id\r\n        sellingProducts {\r\n          id\r\n          name\r\n          bigImg\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Me = () => {\r\n  const history = useHistory();\r\n  const currentMenu = useReactiveVar(currentMeMenu);\r\n  const [selected, setSelected] = useState<string>(currentMenu);\r\n  const [fullsizeMode, setFullsizeMode] = useState(false);\r\n  const { data, loading, refetch: refetchMe } = useMe();\r\n\r\n  const [\r\n    sellingProductHistoryQuery,\r\n    { loading: sellingPHLoading, data: sellingPHData, called },\r\n  ] = useLazyQuery<userSellingHistory, userSellingHistoryVariables>(\r\n    USER_SELLING_HISTORY_QUERY,\r\n    { fetchPolicy: \"network-only\" }\r\n  );\r\n\r\n  const {\r\n    data: myWalletData,\r\n    loading: myWalletLoading,\r\n    refetch,\r\n  } = useMyWallet();\r\n\r\n  const onClickMenu = (e: any) => {\r\n    let targetMenu = e.target;\r\n    if (targetMenu.tagName === \"H2\") {\r\n      targetMenu = targetMenu.parentNode;\r\n    }\r\n    if (targetMenu.id) {\r\n      if (selected) {\r\n        if (selected === targetMenu.id) {\r\n          return;\r\n        }\r\n        const selectedMenu = document.getElementById(selected);\r\n        selectedMenu?.classList.remove(\"bg-indigo-500\", \"text-amber-300\");\r\n      }\r\n      if (targetMenu.id === MeMenus.BuyingHistoryMenu) {\r\n        setSelected(MeMenus.BuyingHistoryMenu);\r\n        currentMeMenu(MeMenus.BuyingHistoryMenu);\r\n      }\r\n      if (targetMenu.id === MeMenus.SellingHistoryMenu) {\r\n        setSelected(MeMenus.SellingHistoryMenu);\r\n        currentMeMenu(MeMenus.SellingHistoryMenu);\r\n      }\r\n      if (targetMenu.id === MeMenus.UsernameMenu) {\r\n        setSelected(MeMenus.UsernameMenu);\r\n        currentMeMenu(MeMenus.UsernameMenu);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onClickLogOut = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      localStorage.removeItem(\"token\");\r\n    }\r\n    history.push(\"/\");\r\n    window.location.reload();\r\n  };\r\n\r\n  const onClickToFullsize = () => {\r\n    setFullsizeMode(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const selectedMenu = document.getElementById(selected);\r\n    if (selectedMenu) {\r\n      selectedMenu.classList.add(\"bg-indigo-500\", \"text-amber-300\");\r\n    }\r\n  }, [selected]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"data Effect!\");\r\n    if (data?.me.user?.isVerified === false) {\r\n      history.push(\"/not-valid-user\");\r\n    }\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    refetch();\r\n    refetchMe();\r\n    if (data?.me.user?.id) {\r\n      console.log(\"data Effect and user!\");\r\n      sellingProductHistoryQuery({\r\n        variables: { input: { userId: data?.me.user?.id } },\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <LoadingSpinner />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {!loading && data?.me.user && (\r\n        <>\r\n          {data.me.user.avatarImg && fullsizeMode === true && (\r\n            <AvatarFullsize\r\n              avatarUrl={data.me.user.avatarImg}\r\n              fullsizeMode={fullsizeMode}\r\n              setFullsizeMode={setFullsizeMode}\r\n            />\r\n          )}\r\n          <div className=\"max-w-screen-2xl  min-h-screen  mx-12 2xl:mx-auto shadow-2xl\">\r\n            <header className=\"flex w-full items-center justify-between shadow-2xl bg-amber-300\">\r\n              <div\r\n                id={MeMenus.UsernameMenu}\r\n                onClick={onClickMenu}\r\n                className=\"w-full py-5   cursor-pointer overflow-hidden\"\r\n              >\r\n                <h2 className=\"text-xs md:text-xl text-center font-semibold uppercase\">\r\n                  {data.me.user.username}\r\n                </h2>\r\n              </div>\r\n              <div\r\n                id={MeMenus.BuyingHistoryMenu}\r\n                onClick={onClickMenu}\r\n                className=\"w-full py-5 cursor-pointer \"\r\n              >\r\n                <h2 className=\"text-xs md:text-xl text-center font-semibold\">\r\n                  구매 내역\r\n                </h2>\r\n              </div>\r\n              <div\r\n                id={MeMenus.SellingHistoryMenu}\r\n                onClick={onClickMenu}\r\n                className=\"w-full py-5 cursor-pointer  \"\r\n              >\r\n                <h2 className=\"text-xs md:text-xl text-center font-semibold\">\r\n                  판매 내역\r\n                </h2>\r\n              </div>\r\n              <div\r\n                onClick={onClickLogOut}\r\n                className=\"w-6/12 py-5 cursor-pointer  bg-red-500 \"\r\n              >\r\n                <h2 className=\"text-xs md:text-xl text-center font-semibold text-amber-300 \">\r\n                  로그아웃\r\n                </h2>\r\n              </div>\r\n            </header>\r\n            <main className=\"p-5\">\r\n              {selected === MeMenus.UsernameMenu && (\r\n                <>\r\n                  <div className=\"flex flex-col items-center md:grid md:grid-cols-2 md:grid-rows-1 w-full shadow-xl\">\r\n                    {data.me.user.avatarImg ? (\r\n                      <div className=\"w-full h-60 md:h-96  overflow-hidden\">\r\n                        <div\r\n                          onClick={onClickToFullsize}\r\n                          className=\"w-full h-full  bg-cover bg-center cursor-pointer transform hover:scale-125 duration-500\"\r\n                          style={{\r\n                            backgroundImage: `url(${data.me.user.avatarImg})`,\r\n                          }}\r\n                        ></div>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"w-full bg-indigo-800 \">\r\n                        <div className=\"w-full py-20 md:py-32 flex items-center justify-center bg-indigo-800\">\r\n                          <FontAwesomeIcon\r\n                            icon={faUserTimes}\r\n                            className=\"md:text-9xl text-6xl text-indigo-500\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                    <article className=\"w-full h-full grid grid-cols-3 grid-rows-1 bg-indigo-500 \">\r\n                      <section className=\"py-10 md:px-5 w-full h-full md:text-base lg:text-xl 2xl:text-2xl  font-semibold text-indigo-800  border-r-2 border-dotted border-indigo-600  flex justify-center items-center relative \">\r\n                        <span className=\"z-10 text-gray-200\">\r\n                          {data.me.user.email}\r\n                        </span>\r\n                        <FontAwesomeIcon\r\n                          icon={faAt}\r\n                          className=\"md:text-9xl text-6xl absolute mx-auto text-center opacity-40\"\r\n                        />\r\n                      </section>\r\n                      <section className=\"py-10 md:px-5 w-full h-full md:text-base lg:text-xl 2xl:text-2xl  font-semibold text-indigo-800  border-r-2 border-dotted border-indigo-600 flex justify-center items-center relative\">\r\n                        <span className=\"z-10 text-black\">\r\n                          {data.me.user.isVerified ? (\r\n                            <span className=\"text-gray-200\">인증 됨</span>\r\n                          ) : (\r\n                            <span className=\"text-gray-200\">인증되지 않음</span>\r\n                          )}\r\n                        </span>\r\n                        {data.me.user.isVerified ? (\r\n                          <FontAwesomeIcon\r\n                            icon={faCheck}\r\n                            className=\" md:text-9xl text-6xl absolute mx-auto text-center opacity-40\"\r\n                          />\r\n                        ) : (\r\n                          <FontAwesomeIcon\r\n                            icon={faTimes}\r\n                            className=\" md:text-9xl text-6xl absolute mx-auto text-center opacity-40\"\r\n                          />\r\n                        )}\r\n                      </section>\r\n                      <section className=\"py-10 md:px-5 w-full h-full md:text-base lg:text-xl 2xl:text-2xl  font-semibold text-indigo-800 flex justify-center items-center relative\">\r\n                        <span className=\"z-10 text-gray-200\">\r\n                          {data.me.user.username}\r\n                        </span>\r\n                        <FontAwesomeIcon\r\n                          icon={faUserCircle}\r\n                          className=\"md:text-9xl text-6xl absolute mx-auto text-center opacity-40\"\r\n                        />\r\n                      </section>\r\n                    </article>\r\n                  </div>\r\n                  {/* edit Profile button */}\r\n                  <div className=\"pt-3 flex justify-end items-center\">\r\n                    {data.me.user && (\r\n                      <Link\r\n                        to={`/users/${data.me.user.id}/edit-profile`}\r\n                        className=\"md:text-xl text-base bg-indigo-600 py-5 px-3 text-gray-200 font-semibold rounded-xl\"\r\n                      >\r\n                        프로필 수정하기\r\n                      </Link>\r\n                    )}\r\n                  </div>\r\n                  {/* point component */}\r\n                  <div className=\" mt-5  grid grid-cols-2 pb-32\">\r\n                    <h1 className=\"w-full h-full md:text-2xl  text-center py-5 md:py-10 px-5 rounded-l-2xl bg-indigo-600 text-amber-300 \">\r\n                      <span className=\"text-gray-200\">보유 포인트: </span>\r\n                      {myWalletData?.myWallet.wallet?.point ? (\r\n                        <span className=\" font-semibold \">\r\n                          {numberWithCommas(\r\n                            myWalletData?.myWallet.wallet?.point\r\n                          )}\r\n                        </span>\r\n                      ) : (\r\n                        <span>0</span>\r\n                      )}\r\n                    </h1>\r\n                    <button className=\"w-full h-full md:text-2xl bg-teal-500 py-5 md:py-10 px-5 rounded-r-2xl focus:outline-none focus:ring-4 ring-teal-600 font-semibold text-gray-200 \">\r\n                      포인트 충전하기\r\n                    </button>\r\n                  </div>\r\n                </>\r\n              )}\r\n              {selected === MeMenus.BuyingHistoryMenu && (\r\n                <>\r\n                  <div className=\"pt-10 pb-32 md:px-10 grid  md:grid-cols-3 gap-5  overflow-hidden\">\r\n                    {!myWalletLoading &&\r\n                      myWalletData?.myWallet.wallet?.histories?.map(\r\n                        (walletHistory, index) => (\r\n                          <WalletHistory key={index} {...walletHistory} />\r\n                        )\r\n                      )}\r\n                  </div>\r\n                </>\r\n              )}\r\n              {selected === MeMenus.SellingHistoryMenu && (\r\n                <>\r\n                  {sellingPHLoading && called ? (\r\n                    <LoadingSpinner />\r\n                  ) : (\r\n                    <div className=\"p-5 grid md:grid-cols-3 gap-5 pb-32\">\r\n                      {sellingPHData?.findUserById.user?.sellingProducts &&\r\n                        sellingPHData?.findUserById.user?.sellingProducts.map(\r\n                          (eachProduct) => (\r\n                            <SellingHistory\r\n                              key={eachProduct.id}\r\n                              id={eachProduct.id}\r\n                              bigImg={eachProduct.bigImg}\r\n                              name={eachProduct.name}\r\n                            />\r\n                          )\r\n                        )}\r\n                    </div>\r\n                  )}\r\n                </>\r\n              )}\r\n            </main>\r\n          </div>\r\n          <Menu />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Messages.tsx",["177"],"import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useMe } from \"../hooks/useMe\";\r\n\r\nexport const Messages = () => {\r\n  const history = useHistory();\r\n  const { loading, data } = useMe();\r\n  useEffect(() => {\r\n    if (!loading && data?.me.user?.isVerified === false) {\r\n      history.push(\"/not-valid-user\");\r\n    }\r\n  }, []);\r\n  return <div>물좀 가져옴</div>;\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\UserProfile.tsx",["178","179","180","181","182"],"import { gql, useQuery, useReactiveVar } from \"@apollo/client\";\r\nimport {\r\n  faAt,\r\n  faCheck,\r\n  faPlus,\r\n  faTimes,\r\n  faUserCircle,\r\n  faUserTimes,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { currentUserProfileMenu } from \"../apollo\";\r\nimport { AvatarFullsize } from \"../components/avatarFullsize\";\r\nimport { BackButton } from \"../components/BackButton\";\r\nimport { LoadingSpinner } from \"../components/LoadingSpinner\";\r\nimport { SellingHistory } from \"../components/SellingHistory\";\r\nimport { useMe } from \"../hooks/useMe\";\r\nimport {\r\n  findUserById,\r\n  findUserByIdVariables,\r\n} from \"../__generated__/findUserById\";\r\n\r\ninterface IParams {\r\n  id: string;\r\n}\r\n\r\nconst FIND_USER_BY_ID_QUERY = gql`\r\n  query findUserById($input: FindUserByIdInput!) {\r\n    findUserById(input: $input) {\r\n      ok\r\n      error\r\n      user {\r\n        id\r\n        email\r\n        isVerified\r\n        username\r\n        avatarImg\r\n        sellingProducts {\r\n          id\r\n          name\r\n          bigImg\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport enum UserProfileMenus {\r\n  UsernameMenu = \"UsernameMenu\",\r\n  SellingHistoryMenu = \"SellingHistoryMenu\",\r\n}\r\n\r\nexport const UserProfile = () => {\r\n  const history = useHistory();\r\n  const { id } = useParams<IParams>();\r\n  const currentMenu = useReactiveVar(currentUserProfileMenu);\r\n  const [selected, setSelected] = useState<string>(currentMenu);\r\n  const { loading: userLoading, data: userData } = useMe();\r\n  const [fullsizeMode, setFullsizeMode] = useState(false);\r\n  const { data, error } = useQuery<findUserById, findUserByIdVariables>(\r\n    FIND_USER_BY_ID_QUERY,\r\n    { variables: { input: { userId: +id } }, fetchPolicy: \"network-only\" }\r\n  );\r\n\r\n  const onClickMenu = (e: any) => {\r\n    let targetMenu = e.target;\r\n    if (targetMenu.tagName === \"H2\") {\r\n      targetMenu = targetMenu.parentNode;\r\n    }\r\n    if (targetMenu.id) {\r\n      if (selected) {\r\n        if (selected === targetMenu.id) {\r\n          return;\r\n        }\r\n        const selectedMenu = document.getElementById(selected);\r\n        selectedMenu?.classList.remove(\"bg-indigo-500\", \"text-amber-300\");\r\n      }\r\n\r\n      if (targetMenu.id === UserProfileMenus.SellingHistoryMenu) {\r\n        setSelected(UserProfileMenus.SellingHistoryMenu);\r\n        currentUserProfileMenu(UserProfileMenus.SellingHistoryMenu);\r\n      }\r\n      if (targetMenu.id === UserProfileMenus.UsernameMenu) {\r\n        setSelected(UserProfileMenus.UsernameMenu);\r\n        currentUserProfileMenu(UserProfileMenus.UsernameMenu);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onClickToFullsize = () => {\r\n    setFullsizeMode(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const selectedMenu = document.getElementById(selected);\r\n    if (selectedMenu) {\r\n      selectedMenu.classList.add(\"bg-indigo-500\", \"text-amber-300\");\r\n    }\r\n  }, [selected]);\r\n\r\n  useEffect(() => {\r\n    if (userData?.me.user && data?.findUserById.user) {\r\n      if (userData?.me.user.id === data?.findUserById.user.id) {\r\n        history.push(\"/me\");\r\n      }\r\n    }\r\n  }, [userData, data]);\r\n\r\n  useEffect(() => {\r\n    if (userData?.me.user?.isVerified === false) {\r\n      history.push(\"/not-valid-user\");\r\n    }\r\n  }, [userData]);\r\n\r\n  if (userLoading) {\r\n    <LoadingSpinner />;\r\n  }\r\n\r\n  if (data) {\r\n    if (!data.findUserById.ok) {\r\n      history.goBack();\r\n    }\r\n  }\r\n\r\n  if (error) {\r\n    console.log(error);\r\n    history.goBack();\r\n  }\r\n\r\n  console.log(data);\r\n  return (\r\n    <div>\r\n      <BackButton />\r\n      {data?.findUserById.user && (\r\n        <div>\r\n          {data.findUserById.user.avatarImg && fullsizeMode === true && (\r\n            <AvatarFullsize\r\n              avatarUrl={data.findUserById.user.avatarImg}\r\n              fullsizeMode={fullsizeMode}\r\n              setFullsizeMode={setFullsizeMode}\r\n            />\r\n          )}\r\n          <div className=\"max-w-screen-2xl  min-h-screen  mx-12 2xl:mx-auto shadow-2xl\">\r\n            <header className=\"flex w-full items-center justify-between shadow-2xl bg-amber-300\">\r\n              <div\r\n                id={UserProfileMenus.UsernameMenu}\r\n                onClick={onClickMenu}\r\n                className=\"w-full py-5 cursor-pointer overflow-hidden \"\r\n              >\r\n                <h2 className=\"text-xs md:text-xl text-center font-semibold uppercase\">\r\n                  {data.findUserById.user.username}\r\n                </h2>\r\n              </div>\r\n              <div\r\n                id={UserProfileMenus.SellingHistoryMenu}\r\n                onClick={onClickMenu}\r\n                className=\"w-full py-5 cursor-pointer  \"\r\n              >\r\n                <h2 className=\"text-xs md:text-xl text-center font-semibold\">\r\n                  판매 내역\r\n                </h2>\r\n              </div>\r\n            </header>\r\n            <main className=\"p-5\">\r\n              {selected === UserProfileMenus.UsernameMenu && (\r\n                <>\r\n                  <div className=\"grid grid-rows-2 md:grid-cols-2 md:grid-rows-1 w-full transition-shadow duration-500   \">\r\n                    {data.findUserById.user.avatarImg ? (\r\n                      <div className=\"overflow-hidden\">\r\n                        <div\r\n                          onClick={onClickToFullsize}\r\n                          className=\"w-full py-32 bg-cover bg-center transform hover:scale-125 duration-500 \"\r\n                          style={{\r\n                            backgroundImage: `url(${data.findUserById.user.avatarImg})`,\r\n                          }}\r\n                        ></div>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"w-full py-20 md:py-32 flex items-center justify-center bg-indigo-800\">\r\n                        <FontAwesomeIcon\r\n                          icon={faUserTimes}\r\n                          className=\"md:text-9xl text-6xl text-indigo-500\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n                    <article className=\"w-full h-2/3 md:h-full grid grid-cols-2 grid-rows-1 bg-gray-200\">\r\n                      <section className=\"py-10 md:py-0 w-full h-full md:text-base lg:text-xl 2xl:text-2xl text-xs font-semibold text-indigo-600  border-r-2 border-dotted border-indigo-600  flex justify-center items-center relative\">\r\n                        <span className=\"z-10 text-black\">\r\n                          {data.findUserById.user.email}\r\n                        </span>\r\n                        <FontAwesomeIcon\r\n                          icon={faAt}\r\n                          className=\"md:text-9xl text-6xl absolute mx-auto text-center opacity-40\"\r\n                        />\r\n                      </section>\r\n                      <section className=\"py-10 md:py-0 w-full h-full md:text-base lg:text-xl 2xl:text-2xl text-xs font-semibold text-indigo-600 flex justify-center items-center relative\">\r\n                        <span className=\"z-10 text-black\">\r\n                          {data.findUserById.user.username}\r\n                        </span>\r\n                        <FontAwesomeIcon\r\n                          icon={faUserCircle}\r\n                          className=\"md:text-9xl text-6xl absolute mx-auto text-center opacity-40\"\r\n                        />\r\n                      </section>\r\n                    </article>\r\n                  </div>\r\n                </>\r\n              )}\r\n              {selected === UserProfileMenus.SellingHistoryMenu && (\r\n                <div className=\"p-5 grid md:grid-cols-3 gap-5\">\r\n                  {data.findUserById.user.sellingProducts &&\r\n                    data.findUserById.user.sellingProducts.map(\r\n                      (eachHistory) => (\r\n                        <SellingHistory\r\n                          id={eachHistory.id}\r\n                          key={eachHistory.id}\r\n                          bigImg={eachHistory.bigImg}\r\n                          name={eachHistory.name}\r\n                        />\r\n                      )\r\n                    )}\r\n                </div>\r\n              )}\r\n            </main>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\NotValidUser.tsx",["183"],"import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { isLoggedIn } from \"../apollo\";\r\nimport { ConfirmVerificationCodeInput } from \"../__generated__/globalTypes\";\r\n\r\nexport const NotValidUser = () => {\r\n  const history = useHistory();\r\n  const {\r\n    register,\r\n    getValues,\r\n    handleSubmit,\r\n    errors,\r\n  } = useForm<ConfirmVerificationCodeInput>({ mode: \"onChange\" });\r\n  const onClickValidation = () => {\r\n    const { code } = getValues();\r\n    history.push(`/validate-code?code=${code}`);\r\n  };\r\n  const onClickToResetToken = () => {\r\n    localStorage.removeItem(\"token\");\r\n    history.push(\"/\");\r\n    window.location.reload();\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"min-h-screen flex justify-center items-center bg-indigo-500\">\r\n        <div className=\"max-w-screen-sm w-full mx-10 bg-white shadow-xl rounded-md py-12 px-10 sm:mx-0\">\r\n          <h1 className=\"text-center font-semibold text-2xl\">\r\n            받으신 코드를 입력하고, 서비스를 계속 이용해주세요.\r\n          </h1>\r\n          <form\r\n            onSubmit={handleSubmit(onClickValidation)}\r\n            className=\"w-full mt-5 flex flex-col items-end\"\r\n          >\r\n            <input\r\n              ref={register({\r\n                required: \"코드를 입력해 주세요\",\r\n              })}\r\n              className=\"w-full py-5 px-3 border focus:outline-none focus:border-indigo-600 transition-colors\"\r\n              type=\"text\"\r\n              name=\"code\"\r\n              placeholder=\"코드\"\r\n              required\r\n            />\r\n            {errors.code?.message && (\r\n              <h2 className=\"text-red-500 font-medium text-md my-3\">\r\n                {errors.code?.message}\r\n              </h2>\r\n            )}\r\n            <div className=\"mt-10 grid grid-cols-2 w-full\">\r\n              <Link\r\n                onClick={onClickToResetToken}\r\n                className=\" text-base hover:bg-indigo-500  hover:text-white  border transition-colors flex justify-center items-center p-3\"\r\n                to=\"/\"\r\n              >\r\n                로그인 페이지로 돌아가기\r\n              </Link>\r\n              <button className=\" border  font-medium text-md hover:bg-teal-600 hover:text-white transition-colors flex justify-center items-center p-3 focus:outline-none\">\r\n                확인\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\WalletHistory.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Product.tsx",["184","185"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { PRODUCTS_FRAGMENT } from \"../fragment\";\r\nimport {\r\n  findProductById,\r\n  findProductByIdVariables,\r\n} from \"../__generated__/findProductById\";\r\nimport { LoadingSpinner } from \"../components/LoadingSpinner\";\r\nimport { getNameSuppressed, numberWithCommas } from \"../utils\";\r\nimport { joinRoom, joinRoomVariables } from \"../__generated__/joinRoom\";\r\nimport { useMe } from \"../hooks/useMe\";\r\nimport { PointPercent } from \"../__generated__/globalTypes\";\r\nimport { FullSizeImgBoard } from \"../components/FullSizeImgBoard\";\r\nimport { BackButton } from \"../components/BackButton\";\r\n\r\ninterface IParams {\r\n  id: string;\r\n}\r\n\r\nexport const FIND_PRODUCT_BY_ID_QUERY = gql`\r\n  query findProductById($productId: Float!) {\r\n    findProductById(productId: $productId) {\r\n      ok\r\n      error\r\n      product {\r\n        ...productsParts\r\n        seller {\r\n          id\r\n          username\r\n        }\r\n        buyer {\r\n          id\r\n          username\r\n        }\r\n        room {\r\n          participantCounts\r\n          isMeInRoom\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ${PRODUCTS_FRAGMENT}\r\n`;\r\n\r\nconst JOIN_ROOM_MUTATION = gql`\r\n  mutation joinRoom($input: JoinRoomInput!) {\r\n    joinRoom(input: $input) {\r\n      ok\r\n      error\r\n      soldout\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Product = () => {\r\n  const history = useHistory();\r\n  const descriptionContainer = useRef<HTMLHeadingElement>(null);\r\n  const [fullSizeMode, setFullSizeMode] = useState<boolean>(false);\r\n  const { id } = useParams<IParams>();\r\n  const { data: userData, loading: userLoading } = useMe();\r\n  const { loading, data, refetch } = useQuery<\r\n    findProductById,\r\n    findProductByIdVariables\r\n  >(FIND_PRODUCT_BY_ID_QUERY, {\r\n    variables: {\r\n      productId: +id,\r\n    },\r\n  });\r\n\r\n  const onCompleted = (data: joinRoom) => {\r\n    const {\r\n      joinRoom: { ok, error, soldout },\r\n    } = data;\r\n    if (ok) {\r\n      alert(\"성공적으로 등록 되셨습니다.\");\r\n      if (soldout) {\r\n        alert(\r\n          \"상품의 금액 임계점을 넘은 상태이므로 랜덤으로 구매자를 뽑습니다.\"\r\n        );\r\n      }\r\n      refetch({ productId: +id });\r\n    }\r\n    if (!ok && error) {\r\n      alert(error);\r\n    }\r\n  };\r\n  const [joinRoomMutation] = useMutation<joinRoom, joinRoomVariables>(\r\n    JOIN_ROOM_MUTATION,\r\n    { onCompleted }\r\n  );\r\n\r\n  const getRoomPrice = (value: PointPercent): number => {\r\n    let percent: number = 1;\r\n    if (data?.findProductById.product?.price) {\r\n      if (value === PointPercent.full) {\r\n        percent = 1;\r\n      }\r\n      if (value === PointPercent.half) {\r\n        percent = 0.5;\r\n      }\r\n      if (value === PointPercent.one) {\r\n        percent = 0.01;\r\n      }\r\n      if (value === PointPercent.ten) {\r\n        percent = 0.1;\r\n      }\r\n      if (value === PointPercent.zeroDotOne) {\r\n        percent = 0.001;\r\n      }\r\n      return Math.ceil(data.findProductById.product.price * percent);\r\n    } else {\r\n      throw Error(\"room Price를 구하지 못했습니다.\");\r\n    }\r\n  };\r\n\r\n  const onClickJoinRoom = async () => {\r\n    if (data?.findProductById.product && userData?.me.user) {\r\n      const joinRoomPrice = getRoomPrice(\r\n        data.findProductById.product.pointPercent\r\n      );\r\n      await joinRoomMutation({\r\n        variables: {\r\n          input: {\r\n            price: joinRoomPrice,\r\n            productId: data.findProductById.product.id,\r\n            userId: userData.me.user?.id,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const onClickFullSizeImg = () => {\r\n    if (data?.findProductById.product?.bigImg) {\r\n      setFullSizeMode(true);\r\n    }\r\n  };\r\n\r\n  const onClickToRevealAllName = (e: any) => {\r\n    if (data?.findProductById.product?.name) {\r\n      e.target.innerText = data?.findProductById.product?.name;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!userLoading && userData?.me.user?.isVerified === false) {\r\n      history.push(\"/not-valid-user\");\r\n    }\r\n  }, [userData]);\r\n\r\n  useEffect(() => {\r\n    if (data?.findProductById.product?.description) {\r\n      if (descriptionContainer.current) {\r\n        descriptionContainer.current.innerHTML =\r\n          data.findProductById.product.description;\r\n      }\r\n    }\r\n  }, [data]);\r\n\r\n  if (loading) {\r\n    return <LoadingSpinner />;\r\n  }\r\n\r\n  if (data?.findProductById.error) {\r\n    return (\r\n      <div className=\"w-full h-screen flex flex-col justify-center items-center\">\r\n        <h1 className=\"text-amber-300 text-3xl font-bold\">\r\n          {data?.findProductById.error}\r\n        </h1>\r\n        <Link className=\"mt-10 text-gray-200 hover:underline text-xl\" to=\"/\">\r\n          홈으로 돌아가기\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  console.log(data);\r\n  return (\r\n    <div>\r\n      {/* 뒤로 가기 버튼 */}\r\n      <BackButton />\r\n      {data?.findProductById.product?.detailImgs &&\r\n        data?.findProductById.product?.detailImgs.length !== 0 && (\r\n          <FullSizeImgBoard\r\n            fullSizeMode={fullSizeMode}\r\n            setFullSizeMode={setFullSizeMode}\r\n            detailImgs={data?.findProductById.product?.detailImgs}\r\n          />\r\n        )}\r\n      {/* 메인 프레임  */}\r\n      <div className=\"max-w-screen-2xl min-h-screen mx-12 2xl:mx-auto shadow-2xl bg-indigo-500\">\r\n        {/* 프로덕트 페이지  최상단에 위치한 상품 사진 및 정보 컴포넌트 */}\r\n        <div className=\" grid grid-rows-2  md:grid-cols-2 md:grid-rows-1  pt-10 mx-5  shadow-xl \">\r\n          {/* 프로덕트 사진 */}\r\n          <div className=\" w-full h-full md:rounded-l-2xl md:rounded-t-none rounded-t-2xl border-8 border-indigo-900 overflow-hidden  \">\r\n            <div\r\n              onClick={onClickFullSizeImg}\r\n              className=\"w-full h-full bg-cover bg-center transform hover:scale-110 transition-transform cursor-pointer z-0\"\r\n              style={{\r\n                backgroundImage: `url(${data?.findProductById.product?.bigImg})`,\r\n                transitionDuration: \"0.6s\",\r\n              }}\r\n            ></div>\r\n          </div>\r\n          {/* 프로덕트 디테일 정보 */}\r\n          <div className=\" w-full h-full bg-indigo-700 text-amber-300 grid grid-cols-2 md:rounded-r-2xl md:rounded-b-none rounded-b-2xl border-8 border-indigo-900 md:border-l-0 border-t-0 md:border-t-8\">\r\n            <h1 className=\"text-xl font-semibold md:text-3xl  flex flex-col justify-center items-center border-r border-b border-indigo-500 p-3 \">\r\n              <span>📦</span>\r\n              {data?.findProductById.product?.name && (\r\n                <div className=\"text-center\">\r\n                  {getNameSuppressed(\r\n                    data.findProductById.product.name\r\n                  ).includes(\"...\") ? (\r\n                    <>\r\n                      <span\r\n                        onClick={onClickToRevealAllName}\r\n                        className=\"hover:underline\"\r\n                      >\r\n                        {getNameSuppressed(data.findProductById.product.name)}\r\n                      </span>\r\n                    </>\r\n                  ) : (\r\n                    <span>{data.findProductById.product.name}</span>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </h1>\r\n            <h1 className=\"text-xl font-semibold md:text-3xl  flex flex-col justify-center items-center border-b border-indigo-500 p-3\">\r\n              <span>💲</span>\r\n              {data?.findProductById.product?.price ? (\r\n                <span>\r\n                  {numberWithCommas(data?.findProductById.product?.price)}원\r\n                </span>\r\n              ) : (\r\n                <span>가격이 정해지지 않았습니다.</span>\r\n              )}\r\n              {data?.findProductById.product?.pointPercent && (\r\n                <span className=\"text-xs md:text-base mt-3\">\r\n                  (응모당{\" \"}\r\n                  {numberWithCommas(\r\n                    getRoomPrice(data.findProductById.product.pointPercent)\r\n                  )}\r\n                  원)\r\n                </span>\r\n              )}\r\n            </h1>\r\n            <h1 className=\"text-xl font-semibold md:text-3xl  flex flex-col justify-center items-center border-r border-indigo-500 p-3 border-b\">\r\n              <span>🛒</span>\r\n              <Link to={`/category/slug`} className=\"hover:underline\">\r\n                {data?.findProductById.product?.category.slug}\r\n              </Link>\r\n            </h1>\r\n            <h1 className=\"text-xl font-semibold md:text-3xl  flex flex-col justify-center items-center p-3 border-b border-indigo-500\">\r\n              <span>👨‍👧‍👧</span>\r\n              <span>\r\n                {data?.findProductById.product?.room?.participantCounts}\r\n              </span>\r\n            </h1>\r\n            <h1 className=\"text-xl font-semibold md:text-3xl  flex flex-col justify-center items-center p-3 border-r border-indigo-500\">\r\n              <span className=\"text-xs md:text-lg\">판매자</span>\r\n              <span>\r\n                <Link\r\n                  className=\"hover:underline\"\r\n                  to={`/users/${data?.findProductById.product?.seller.id}`}\r\n                >\r\n                  {data?.findProductById.product?.seller.username}\r\n                </Link>\r\n              </span>\r\n            </h1>\r\n            <h1 className=\"text-xl font-semibold md:text-3xl  flex flex-col justify-center items-center p-3\">\r\n              <span className=\"text-xs md:text-lg\">구매자</span>\r\n              {data?.findProductById.product?.buyer ? (\r\n                <span>\r\n                  <Link\r\n                    className=\"hover:underline\"\r\n                    to={`/users/${data?.findProductById.product?.buyer.id}`}\r\n                  >\r\n                    {data.findProductById.product.buyer.username}\r\n                  </Link>\r\n                </span>\r\n              ) : (\r\n                <span className=\"text-lg\">구매자가 아직 없습니다.</span>\r\n              )}\r\n            </h1>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 프로덕트 수정 */}\r\n\r\n        {data?.findProductById.product?.seller.id &&\r\n          userData?.me.user?.id &&\r\n          data?.findProductById.product?.seller.id ===\r\n            userData?.me.user?.id && (\r\n            <div className=\"mt-5 flex justify-end items-center mx-5\">\r\n              <Link\r\n                to={`/product/${id}/edit`}\r\n                className=\"bg-indigo-600 text-gray-200 py-5 px-10 rounded-xl font-semibold md:text-xl \"\r\n              >\r\n                수정하기\r\n              </Link>\r\n            </div>\r\n          )}\r\n\r\n        {/* 프로덕트 모인 금액과 참가하는 버튼이 존재하는 부분 */}\r\n        <div className=\"mt-5 mx-5 grid grid-cols-2  \">\r\n          <div className=\"py-5 px-3 bg-indigo-700 text-center font-semibold text-base md:text-xl text-gray-200 rounded-l-2xl   focus:outline-none w-full h-full flex justify-center items-center\">\r\n            {data?.findProductById.product?.soldout ? (\r\n              <span>soldout!</span>\r\n            ) : (\r\n              <>\r\n                {\" \"}\r\n                <span>현재까지 </span>\r\n                <span className=\"text-amber-300\">\r\n                  {numberWithCommas(\r\n                    data?.findProductById.product?.savedAmount || 0\r\n                  )}\r\n                  원\r\n                </span>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"w-full h-full flex justify-center items-center\">\r\n            {data?.findProductById.product?.room?.isMeInRoom ? (\r\n              <button className=\"py-5 px-3 bg-teal-500 rounded-r-2xl focus:outline-none font-semibold text-base md:text-xl text-amber-300 transition-colors  cursor-not-allowed w-full \">\r\n                이미 참여하셨습니다.\r\n              </button>\r\n            ) : (\r\n              <>\r\n                {data?.findProductById.product?.soldout ? (\r\n                  <button className=\"py-5 px-3 bg-teal-500 rounded-r-2xl focus:outline-none font-semibold text-base md:text-xl text-amber-300 transition-colors  cursor-not-allowed w-full \">\r\n                    SoldOut!\r\n                  </button>\r\n                ) : (\r\n                  <button\r\n                    onClick={onClickJoinRoom}\r\n                    className=\"py-5 px-3 bg-teal-500 rounded-r-2xl focus:outline-none font-semibold text-base md:text-xl text-gray-200 hover:text-amber-300 transition-colors focus:ring-4 ring-teal-600 w-full \"\r\n                  >\r\n                    참가하기\r\n                  </button>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n        {/* 프로덕트 세부 설명 컴포넌트 */}\r\n        <div className=\"mt-10 mx-5 pb-20\">\r\n          <h1\r\n            ref={descriptionContainer}\r\n            className=\"bg-gray-200 py-16 px-5 rounded-2xl shadow-2xl md:text-xl\"\r\n          ></h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoadingSpinner.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\CreateProduct.tsx",["186","187","188","189","190"],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\FullSizeImgBoard.tsx",["191"],"import { useEffect, useRef, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faChevronRight,\r\n  faChevronLeft,\r\n  faTimes,\r\n  faCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface IProps {\r\n  detailImgs: { source: string }[];\r\n  fullSizeMode: boolean;\r\n  setFullSizeMode: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nexport const FullSizeImgBoard: React.FC<IProps> = ({\r\n  detailImgs,\r\n  fullSizeMode,\r\n  setFullSizeMode,\r\n}) => {\r\n  const [imgIndex, setImgIndex] = useState<number>(0);\r\n\r\n  const onClickToExit = () => {\r\n    setFullSizeMode(false);\r\n  };\r\n\r\n  const onClickToLeft = () => {\r\n    let _index = imgIndex;\r\n    const prevImgPagination = document.getElementById(`imgPagination${_index}`);\r\n    let nextImgPagination: HTMLElement | null;\r\n\r\n    if (detailImgs) {\r\n      if (imgIndex === 0) {\r\n        setImgIndex(detailImgs.length - 1);\r\n        _index = detailImgs.length - 1;\r\n      } else {\r\n        setImgIndex((prev) => prev - 1);\r\n        _index -= 1;\r\n      }\r\n    }\r\n\r\n    nextImgPagination = document.getElementById(`imgPagination${_index}`);\r\n\r\n    if (prevImgPagination) {\r\n      prevImgPagination.style.color = \"black\";\r\n    }\r\n\r\n    if (nextImgPagination) {\r\n      nextImgPagination.style.color = \"rgba(252, 211, 77, 1)\";\r\n    }\r\n  };\r\n\r\n  const onClickToRight = () => {\r\n    let _index = imgIndex;\r\n    const prevImgPagination = document.getElementById(`imgPagination${_index}`);\r\n    let nextImgPagination: HTMLElement | null;\r\n\r\n    if (imgIndex === detailImgs.length - 1) {\r\n      _index = 0;\r\n      setImgIndex(0);\r\n    } else {\r\n      setImgIndex((prev) => prev + 1);\r\n      _index += 1;\r\n    }\r\n\r\n    nextImgPagination = document.getElementById(`imgPagination${_index}`);\r\n\r\n    if (prevImgPagination) {\r\n      prevImgPagination.style.color = \"black\";\r\n    }\r\n\r\n    if (nextImgPagination) {\r\n      nextImgPagination.style.color = \"rgba(252, 211, 77, 1)\";\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fullSizeImgBoard = document.getElementById(\"fullSizeImgBoard\");\r\n    if (fullSizeImgBoard) {\r\n      if (fullSizeMode) {\r\n        fullSizeImgBoard.style.visibility = \"visible\";\r\n        fullSizeImgBoard.style.opacity = \"1\";\r\n        fullSizeImgBoard.style.zIndex = \"50\";\r\n      } else {\r\n        fullSizeImgBoard.style.visibility = \"hidden\";\r\n        fullSizeImgBoard.style.opacity = \"0\";\r\n        fullSizeImgBoard.style.zIndex = \"0\";\r\n      }\r\n    }\r\n  }, [fullSizeMode]);\r\n\r\n  useEffect(() => {\r\n    const imgPagination = document.getElementById(`imgPagination0`);\r\n    if (imgPagination) {\r\n      imgPagination.style.color = \"rgba(252, 211, 77, 1)\";\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      id=\"fullSizeImgBoard\"\r\n      className=\"z-0 overflow-hidden w-full h-screen fixed top-0 left-0 bg-gray-800 flex justify-center items-center opacity-0 \"\r\n    >\r\n      <img\r\n        src={detailImgs[imgIndex].source}\r\n        className=\"max-w-full max-h-full\"\r\n        alt=\"Img\"\r\n        title=\"Img\"\r\n      />\r\n      {detailImgs && detailImgs.length !== 0 && (\r\n        <div className=\"bg-transparent py-5 px-3 flex justify-center items-center absolute bottom-0 left-0 right-0 mx-auto flex-wrap\">\r\n          {detailImgs.map((eachImg, index) => (\r\n            <FontAwesomeIcon\r\n              key={index}\r\n              id={`imgPagination${index}`}\r\n              icon={faCircle}\r\n              className=\"text-base md:text-xl text-black mx-5 my-3\"\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n      <FontAwesomeIcon\r\n        icon={faChevronLeft}\r\n        onClick={onClickToLeft}\r\n        className=\"absolute top-0 bottom-0 left-0 my-auto text-5xl mx-5 text-amber-300 cursor-pointer\"\r\n      />\r\n      <FontAwesomeIcon\r\n        icon={faChevronRight}\r\n        onClick={onClickToRight}\r\n        className=\"absolute top-0 bottom-0 right-0 my-auto text-5xl mx-5 text-amber-300 cursor-pointer\"\r\n      />\r\n      <FontAwesomeIcon\r\n        onClick={onClickToExit}\r\n        icon={faTimes}\r\n        className=\"absolute top-0 right-0 text-5xl text-amber-300 mx-5 my-5 cursor-pointer\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\SellingHistory.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\BackButton.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\__generated__\\globalTypes.ts",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\EditProfile.tsx",["192","193","194","195","196"],"import { gql, useMutation } from \"@apollo/client\";\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { data } from \"autoprefixer\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { BackButton } from \"../components/BackButton\";\r\nimport { useMe } from \"../hooks/useMe\";\r\nimport {\r\n  editProfile,\r\n  editProfileVariables,\r\n} from \"../__generated__/editProfile\";\r\n\r\ninterface IParams {\r\n  id: string;\r\n}\r\n\r\ninterface IFormParams {\r\n  editProfileUserAvatar?: FileList | null;\r\n  username?: string | null;\r\n  password?: string | null;\r\n}\r\n\r\nconst EDIT_USER_PROFILE = gql`\r\n  mutation editProfile($input: EditProfileInput!) {\r\n    editProfile(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const EditProfile = () => {\r\n  const { data: userData, loading: userLoading } = useMe();\r\n  const { register, getValues, setValue } = useForm<IFormParams>();\r\n  const { id } = useParams<IParams>();\r\n  const history = useHistory();\r\n  const [previewImage, setPreviewImage] = useState<string>(\"\");\r\n  const onCompleted = (data: editProfile) => {\r\n    const {\r\n      editProfile: { error, ok },\r\n    } = data;\r\n    if (ok) {\r\n      alert(\"프로필 수정이 성공적으로 완료되었습니다.\");\r\n      history.goBack();\r\n    }\r\n    if (!ok && error) {\r\n      alert(error);\r\n    }\r\n  };\r\n  const [editProfileMutation] = useMutation<editProfile, editProfileVariables>(\r\n    EDIT_USER_PROFILE,\r\n    { onCompleted }\r\n  );\r\n\r\n  const onInputPicture = () => {\r\n    const { editProfileUserAvatar } = getValues();\r\n\r\n    if (editProfileUserAvatar && editProfileUserAvatar.length !== 0) {\r\n      const file = editProfileUserAvatar.item(0);\r\n      const fileUrl = URL.createObjectURL(file);\r\n      setPreviewImage(fileUrl);\r\n    }\r\n    if (editProfileUserAvatar && editProfileUserAvatar.length === 0) {\r\n      setPreviewImage((prev) => prev);\r\n    }\r\n  };\r\n\r\n  const onClickToSave = async () => {\r\n    const { editProfileUserAvatar, password, username } = getValues();\r\n    let fileUrl: string = \"\";\r\n    if (editProfileUserAvatar && editProfileUserAvatar.length !== 0) {\r\n      const formImgData = new FormData();\r\n      Object.values(editProfileUserAvatar).forEach((eachImg) =>\r\n        formImgData.append(\"uploads\", eachImg)\r\n      );\r\n      const {\r\n        data,\r\n      }: { data: { uploaded: boolean; url: string }[] } = await axios({\r\n        method: \"POST\",\r\n        url: \"http://localhost:4000/uploads\",\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n        data: formImgData,\r\n      });\r\n      if (data && data[0].uploaded === true) {\r\n        fileUrl = data[0].url;\r\n      }\r\n    }\r\n    console.log(editProfileUserAvatar, password, username, fileUrl);\r\n    await editProfileMutation({\r\n      variables: {\r\n        input: {\r\n          userId: +id,\r\n          ...(fileUrl !== \"\" && { avatarImg: fileUrl }),\r\n          ...(password && { password }),\r\n          ...(username && { username }),\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userData?.me.user) {\r\n      if (userData.me.user.id !== +id) {\r\n        history.goBack();\r\n      }\r\n    }\r\n    if (userData?.me.user?.username) {\r\n      setValue(\"username\", userData?.me.user?.username);\r\n    }\r\n  }, [userData]);\r\n\r\n  return (\r\n    <div>\r\n      <BackButton />\r\n      <div className=\"max-w-screen-lg  min-h-screen  mx-12 lg:mx-auto shadow-2xl \">\r\n        <div>\r\n          <label\r\n            htmlFor=\"editProfileUserAvatar\"\r\n            className=\"cursor-pointer h-96 bg-indigo-600 flex justify-center items-center\"\r\n          >\r\n            {previewImage && (\r\n              <img src={previewImage} className=\"max-h-full  max-w-full\" />\r\n            )}\r\n            {userData?.me.user?.avatarImg && !Boolean(previewImage) && (\r\n              <img\r\n                src={userData?.me.user?.avatarImg}\r\n                className=\"max-h-full  max-w-full\"\r\n              />\r\n            )}\r\n            {!Boolean(previewImage) && !userData?.me.user?.avatarImg && (\r\n              <FontAwesomeIcon\r\n                icon={faPlus}\r\n                className=\"text-7xl text-indigo-500\"\r\n              />\r\n            )}\r\n          </label>\r\n          <input\r\n            onInput={onInputPicture}\r\n            ref={register}\r\n            className=\"absolute w-0 h-0 opacity-0\"\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            name=\"editProfileUserAvatar\"\r\n            id=\"editProfileUserAvatar\"\r\n          />\r\n        </div>\r\n        <div className=\"flex flex-col p-5 bg-indigo-700\">\r\n          <input\r\n            ref={register}\r\n            name=\"username\"\r\n            placeholder=\"닉네임\"\r\n            className=\" mb-3 py-5 px-3 md:text-xl focus:outline-none bg-indigo-500 text-white placeholder-gray-200\"\r\n          />\r\n          <input\r\n            ref={register}\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"비밀번호\"\r\n            className=\" py-5 px-3 md:text-xl focus:outline-none bg-indigo-500 text-white placeholder-gray-200\"\r\n          />\r\n          <button\r\n            onClick={onClickToSave}\r\n            className=\"self-end py-3 px-10 bg-teal-500 text-gray-200 font-semibold mt-3\"\r\n          >\r\n            저장\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\avatarFullsize.tsx",["197"],"import { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useEffect, useRef } from \"react\";\r\n\r\ninterface IProps {\r\n  avatarUrl: string;\r\n  fullsizeMode: boolean;\r\n  setFullsizeMode: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nexport const AvatarFullsize: React.FC<IProps> = ({\r\n  avatarUrl,\r\n  fullsizeMode,\r\n  setFullsizeMode,\r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const onClickToExit = () => {\r\n    setFullsizeMode(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (fullsizeMode) {\r\n      if (containerRef.current) {\r\n        containerRef.current.style.display = \"flex\";\r\n      }\r\n    } else {\r\n      if (containerRef.current) {\r\n        containerRef.current.style.display = \"hidden\";\r\n      }\r\n    }\r\n  }, [fullsizeMode]);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className=\"fixed top-0 left-0 w-full h-screen items-center justify-center hidden z-50 bg-gray-800\"\r\n    >\r\n      <img src={avatarUrl} className=\"max-w-full max-h-full\" />\r\n      <FontAwesomeIcon\r\n        onClick={onClickToExit}\r\n        className=\"absolute top-0 right-0 text-5xl text-amber-300 mx-5 my-5 cursor-pointer\"\r\n        icon={faTimes}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\FormError.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\EditProduct.tsx",["198","199","200","201","202"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { useMe } from \"../hooks/useMe\";\r\nimport { allCategories } from \"../__generated__/allCategories\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport axios from \"axios\";\r\nimport { PointPercent } from \"../__generated__/globalTypes\";\r\nimport { FormError } from \"../components/FormError\";\r\nimport { numberWithCommas } from \"../utils\";\r\nimport { ALL_CATEGORIES_QUERY } from \"./CreateProduct\";\r\nimport { PRODUCTS_FRAGMENT } from \"../fragment\";\r\nimport {\r\n  editProductProductQuery,\r\n  editProductProductQueryVariables,\r\n} from \"../__generated__/editProductProductQuery\";\r\nimport {\r\n  editProduct,\r\n  editProductVariables,\r\n} from \"../__generated__/editProduct\";\r\nimport { ImgGrid } from \"../components/ImgGrid\";\r\nimport { BackButton } from \"../components/BackButton\";\r\nimport { FormButton } from \"../components/FormButton\";\r\nimport { FIND_PRODUCT_BY_ID_QUERY } from \"./Product\";\r\n\r\nexport const EDIT_PRODUCT_PRODUCT_QUERY = gql`\r\n  query editProductProductQuery($productId: Float!) {\r\n    findProductById(productId: $productId) {\r\n      ok\r\n      error\r\n      product {\r\n        ...productsParts\r\n        seller {\r\n          id\r\n          username\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ${PRODUCTS_FRAGMENT}\r\n`;\r\n\r\nexport const EDIT_PRODUCT_MUTATION = gql`\r\n  mutation editProduct($input: EditProductInput!) {\r\n    editProduct(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IParams {\r\n  id: string;\r\n}\r\n\r\ninterface IFormProps {\r\n  productName: string;\r\n  productPrice: string;\r\n  category: string;\r\n}\r\n\r\nexport const EditProduct = () => {\r\n  const { id } = useParams<IParams>();\r\n  const descriptionDivRef = useRef<HTMLDivElement>(null);\r\n  const { data: userData, loading: userLoading } = useMe();\r\n  const { data: categoriesData } = useQuery<allCategories>(\r\n    ALL_CATEGORIES_QUERY\r\n  );\r\n  const { data: productData } = useQuery<\r\n    editProductProductQuery,\r\n    editProductProductQueryVariables\r\n  >(EDIT_PRODUCT_PRODUCT_QUERY, { variables: { productId: +id } });\r\n  const [imgUrls, setImgUrls] = useState<string[]>([]);\r\n  const [exitImgGrid, setExitImgGrid] = useState(true);\r\n\r\n  const onCompleted = (data: editProduct) => {\r\n    const {\r\n      editProduct: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      alert(\"업데이트 성공!\");\r\n      history.push(`/product/${id}`);\r\n    } else {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  const [editProductMutation, { loading: editProductLoading }] = useMutation<\r\n    editProduct,\r\n    editProductVariables\r\n  >(EDIT_PRODUCT_MUTATION, { onCompleted });\r\n\r\n  const history = useHistory();\r\n  const {\r\n    register,\r\n    getValues,\r\n    handleSubmit,\r\n    errors,\r\n    formState,\r\n    setValue,\r\n  } = useForm<IFormProps>({\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  const onSubmit = async () => {\r\n    const { category, productName } = getValues();\r\n    const description = descriptionDivRef.current?.innerHTML;\r\n\r\n    await editProductMutation({\r\n      variables: {\r\n        input: {\r\n          productId: +id,\r\n          categorySlug: category,\r\n          ...(description && { description }),\r\n          ...(productName && { name: productName }),\r\n        },\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: FIND_PRODUCT_BY_ID_QUERY,\r\n          variables: {\r\n            productId: +id,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const generatePointPercentOption = (value: PointPercent) => {\r\n    if (value === PointPercent.full) {\r\n      return \"가격의 100%\";\r\n    }\r\n    if (value === PointPercent.half) {\r\n      return \"가격의 50%\";\r\n    }\r\n    if (value === PointPercent.one) {\r\n      return \"가격의 1%\";\r\n    }\r\n    if (value === PointPercent.ten) {\r\n      return \"가격의 10%\";\r\n    }\r\n    if (value === PointPercent.zeroDotOne) {\r\n      return \"가격의 0.1%\";\r\n    }\r\n  };\r\n\r\n  const setProductValueToInput = () => {\r\n    if (productData?.findProductById.product) {\r\n      console.log(\"setProductValueToInput\");\r\n      const originalCategory =\r\n        productData.findProductById.product.category.slug;\r\n      const originalName = productData.findProductById.product.name;\r\n      const originalPrice = productData.findProductById.product.price;\r\n      const originalDescription =\r\n        productData.findProductById.product.description;\r\n\r\n      setValue(\"category\", originalCategory);\r\n      setValue(\"productName\", originalName);\r\n      setValue(\"productPrice\", originalPrice);\r\n\r\n      if (descriptionDivRef.current && originalDescription) {\r\n        descriptionDivRef.current.innerHTML = originalDescription;\r\n      }\r\n\r\n      if (productData?.findProductById.product?.detailImgs) {\r\n        const detailImgs = productData?.findProductById.product?.detailImgs;\r\n        let imgUrlContainer: string[] = [];\r\n        detailImgs.forEach((eachImg) => {\r\n          imgUrlContainer.push(eachImg.source);\r\n        });\r\n        setImgUrls([...imgUrlContainer]);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!userLoading && userData?.me.user?.isVerified === false) {\r\n      history.push(\"/not-valid-user\");\r\n    }\r\n\r\n    if (userData?.me.user && productData?.findProductById.product) {\r\n      if (\r\n        userData?.me.user.id !== productData?.findProductById.product.seller.id\r\n      ) {\r\n        alert(\"접근 권한이 없습니다.\");\r\n        history.push(`/product/${id}`);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setProductValueToInput();\r\n  }, [productData]);\r\n\r\n  useEffect(() => {\r\n    if (exitImgGrid) {\r\n      console.log(\"refetchProduct\");\r\n      setProductValueToInput();\r\n    }\r\n  }, [exitImgGrid]);\r\n\r\n  if (productData?.findProductById.error) {\r\n    return (\r\n      <div className=\"w-full h-screen flex flex-col justify-center items-center\">\r\n        <h1 className=\"text-amber-300 text-3xl font-bold\">\r\n          {productData?.findProductById.error}\r\n        </h1>\r\n        <Link className=\"mt-10 text-gray-200 hover:underline text-xl\" to=\"/\">\r\n          홈으로 돌아가기\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {!exitImgGrid ? (\r\n        <ImgGrid\r\n          productId={+id}\r\n          useFor=\"EDIT\"\r\n          originalImgs={imgUrls.slice()}\r\n          exitImgGrid={exitImgGrid}\r\n          setExitImgGrid={setExitImgGrid}\r\n        />\r\n      ) : (\r\n        <>\r\n          <BackButton />\r\n          <div className=\"max-w-screen-2xl min-h-screen mx-12 2xl:mx-auto shadow-2xl\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <div\r\n                onClick={() => setExitImgGrid(false)}\r\n                className=\" h-64 md:h-96 bg-indigo-800 w-full  cursor-pointer flex justify-center items-center\"\r\n              >\r\n                {productData?.findProductById.product?.bigImg ? (\r\n                  <img\r\n                    className=\"max-w-full max-h-full\"\r\n                    src={productData.findProductById.product.bigImg}\r\n                  />\r\n                ) : (\r\n                  <FontAwesomeIcon\r\n                    icon={faPlus}\r\n                    className=\"text-5xl text-indigo-500\"\r\n                  />\r\n                )}\r\n              </div>\r\n              <div className=\"grid grid-cols-5 grid-rows-4 md:grid-rows-2 bg-indigo-600 \">\r\n                <div className=\"col-start-1 col-span-5 md:col-start-1 md:col-span-3\">\r\n                  <input\r\n                    ref={register}\r\n                    type=\"text\"\r\n                    name=\"productName\"\r\n                    placeholder=\"상품 이름 \"\r\n                    className=\"w-full py-8 md:py-10 px-5 text-xs md:text-xl focus:outline-none bg-indigo-600 text-white  \"\r\n                  />\r\n                </div>\r\n                <div className=\" bg-indigo-600 row-start-2 row-span-1 col-start-1 col-span-5 md:col-start-1 md:col-span-3 md:row-start-2 md:row-span-1\">\r\n                  <div className=\"w-full py-8 md:py-10 px-5 text-xs md:text-xl focus:outline-none bg-indigo-600 text-white cursor-not-allowed \">\r\n                    {productData?.findProductById.product?.price && (\r\n                      <span className=\"text-amber-300 font-semibold\">\r\n                        {numberWithCommas(\r\n                          productData?.findProductById.product?.price\r\n                        )}\r\n                        원\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                  {errors.productPrice?.message && (\r\n                    <FormError errorMsg={errors.productPrice?.message} />\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"col-span-full row-start-3 row-span-1 md:col-start-4 md:col-span-2 md:row-start-1 md:row-span-1\">\r\n                  <select\r\n                    ref={register}\r\n                    name=\"category\"\r\n                    className=\"bg-indigo-400 text-xs md:text-xl font-semibold text-amber-300 focus:outline-none w-full h-full \"\r\n                  >\r\n                    {categoriesData?.allCategories.categories &&\r\n                      categoriesData?.allCategories.categories.map(\r\n                        (category, index) => (\r\n                          <option key={index} className=\"text-white \">\r\n                            {category.slug}\r\n                          </option>\r\n                        )\r\n                      )}\r\n                  </select>\r\n                </div>\r\n                <div className=\"col-span-full row-start-4 row-span-1 md:col-start-4 md:col-span-2 md:row-start-2 md:row-span-1\">\r\n                  <div className=\"bg-indigo-500 focus:outline-none text-xs md:text-xl font-semibold text-amber-300 w-full h-full flex justify-start items-center pl-2 cursor-not-allowed\">\r\n                    {productData?.findProductById.product?.pointPercent &&\r\n                      generatePointPercentOption(\r\n                        productData?.findProductById.product?.pointPercent\r\n                      )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\" py-12 px-10 bg-indigo-800\">\r\n                <div\r\n                  ref={descriptionDivRef}\r\n                  className=\"w-full rounded-lg px-5 py-5 focus:outline-none bg-indigo-100 text-black text-sm md:text-xl\"\r\n                  contentEditable={true}\r\n                  style={{ minHeight: \"500px\" }}\r\n                />\r\n              </div>\r\n              <div className=\"py-10 flex justify-center items-center \">\r\n                <FormButton\r\n                  btnText={\"수정\"}\r\n                  isValid={formState.isValid}\r\n                  loading={editProductLoading}\r\n                />\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\ImgGrid.tsx",["203"],"import { useMutation } from \"@apollo/client\";\r\nimport {\r\n  faCheck,\r\n  faPlus,\r\n  faTimes,\r\n  faTrash,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { BUCKET_NAME } from \"../constants\";\r\nimport { EDIT_PRODUCT_MUTATION } from \"../pages/EditProduct\";\r\nimport {\r\n  editProduct,\r\n  editProductVariables,\r\n} from \"../__generated__/editProduct\";\r\nimport { EDIT_PRODUCT_PRODUCT_QUERY } from \"../pages/EditProduct\";\r\nimport { FIND_PRODUCT_BY_ID_QUERY } from \"../pages/Product\";\r\nimport { AvatarFullsize } from \"./avatarFullsize\";\r\n\r\ninterface IProps {\r\n  originalImgs: string[];\r\n  setOriginalImgs?: React.Dispatch<React.SetStateAction<string[]>>;\r\n  exitImgGrid: boolean;\r\n  setExitImgGrid: React.Dispatch<React.SetStateAction<boolean>>;\r\n  useFor: \"CREATE\" | \"EDIT\";\r\n  productId?: number;\r\n}\r\n\r\nenum ImgGridMode {\r\n  plus = \"plus\",\r\n  delete = \"delete\",\r\n}\r\n\r\nexport const ImgGrid: React.FC<IProps> = ({\r\n  originalImgs,\r\n  exitImgGrid,\r\n  setExitImgGrid,\r\n  useFor,\r\n  productId,\r\n  setOriginalImgs,\r\n}) => {\r\n  const [imgGridMode, setImgGridMode] = useState<ImgGridMode>(ImgGridMode.plus);\r\n  const [imgGrid, setImgGrid] = useState<string[]>([]);\r\n  const [fullsizeMode, setFullsizeMode] = useState(false);\r\n  const [currentFullImg, setCurrentFullImg] = useState(\"\");\r\n  const uploadRef = useRef<HTMLInputElement>(null);\r\n\r\n  const onCompleted = (data: editProduct) => {\r\n    const {\r\n      editProduct: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      alert(\"업데이트 완료\");\r\n    } else {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  const [editProductMutation] = useMutation<editProduct, editProductVariables>(\r\n    EDIT_PRODUCT_MUTATION,\r\n    { onCompleted }\r\n  );\r\n\r\n  const onClickToDeleteOnUpdate = async (e: any) => {\r\n    let section = e.target.parentNode;\r\n    if (section.tagName === \"svg\") {\r\n      section = section.parentNode.parentNode;\r\n    }\r\n    if (section.tagName === \"DIV\") {\r\n      section = section.parentNode;\r\n    }\r\n    // 어딜 클릭하든 section으로 나옴\r\n    const id = section.id.split(\"-\")[1];\r\n    const img = imgGrid[+id];\r\n    const key = img.split(\"/\")[3];\r\n    const data: { bucket: string; key: string } = {\r\n      bucket: BUCKET_NAME,\r\n      key,\r\n    };\r\n    console.log(key);\r\n    const {\r\n      data: axiosData,\r\n    }: { data: { deleted: boolean; error?: string } } = await axios({\r\n      method: \"DELETE\",\r\n      url: \"http://localhost:4000/uploads\",\r\n      data,\r\n    });\r\n\r\n    // send server delete command\r\n    if (axiosData.deleted) {\r\n      const updatedImgs = imgGrid.filter((eachImg) => eachImg !== img);\r\n      setImgGrid([...updatedImgs]);\r\n      if (useFor === \"EDIT\" && productId) {\r\n        let bigImg: string | null;\r\n        if (updatedImgs.length === 0) {\r\n          bigImg = \"delete\";\r\n        } else {\r\n          bigImg = updatedImgs[0];\r\n        }\r\n        await editProductMutation({\r\n          variables: {\r\n            input: {\r\n              productId,\r\n              detailImgSrcs: updatedImgs,\r\n              bigImg,\r\n            },\r\n          },\r\n          refetchQueries: [\r\n            {\r\n              query: EDIT_PRODUCT_PRODUCT_QUERY,\r\n              variables: {\r\n                productId: +productId,\r\n              },\r\n            },\r\n            {\r\n              query: FIND_PRODUCT_BY_ID_QUERY,\r\n              variables: { productId: +productId },\r\n            },\r\n          ],\r\n        });\r\n      }\r\n    } else {\r\n      alert(\"해당 요청이 거부되었습니다.\");\r\n      console.log(axiosData.error);\r\n    }\r\n  };\r\n\r\n  const uploadImgUpdate = async () => {\r\n    if (useFor === \"EDIT\" && productId) {\r\n      if (uploadRef.current?.files) {\r\n        const fileList: FileList = uploadRef.current.files;\r\n        if (fileList && fileList.length !== 0) {\r\n          const formData = new FormData();\r\n          Object.values(fileList).forEach(async (eachFile) => {\r\n            formData.append(\"uploads\", eachFile);\r\n          });\r\n          const {\r\n            data,\r\n          }: {\r\n            data: { uploaded: boolean; url: string | null }[];\r\n          } = await axios({\r\n            method: \"POST\",\r\n            url: \"http://localhost:4000/uploads\",\r\n            headers: { \"Content-Type\": \"multipart/form-data\" },\r\n            data: formData,\r\n          });\r\n          if (data && data.length !== 0) {\r\n            const urlContainer: string[] = [];\r\n            for (const item of data) {\r\n              if (item.uploaded && item.url) {\r\n                urlContainer.push(item.url);\r\n              } else {\r\n                console.log(`aws-s3 img upload error on ${item}`);\r\n              }\r\n            }\r\n            console.log(urlContainer);\r\n            if (urlContainer.length !== 0) {\r\n              const detailImgSrcs = [...imgGrid, ...urlContainer];\r\n              setImgGrid((prev) => [...prev, ...urlContainer]);\r\n              console.log(\"detailImgs\", detailImgSrcs, imgGrid);\r\n              await editProductMutation({\r\n                variables: {\r\n                  input: {\r\n                    productId,\r\n                    detailImgSrcs,\r\n                    bigImg: detailImgSrcs[0],\r\n                  },\r\n                },\r\n                refetchQueries: [\r\n                  {\r\n                    query: EDIT_PRODUCT_PRODUCT_QUERY,\r\n                    variables: {\r\n                      productId: +productId,\r\n                    },\r\n                  },\r\n                  {\r\n                    query: FIND_PRODUCT_BY_ID_QUERY,\r\n                    variables: { productId: +productId },\r\n                  },\r\n                ],\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const uploadImgCreate = async () => {\r\n    if (useFor === \"CREATE\" && setOriginalImgs) {\r\n      if (uploadRef.current?.files) {\r\n        const fileList: FileList = uploadRef.current.files;\r\n        const urls = Object.values(fileList).map((eachFile) =>\r\n          URL.createObjectURL(eachFile)\r\n        );\r\n        console.log(urls);\r\n        if (urls.length !== 0) {\r\n          setImgGrid([...imgGrid, ...urls]);\r\n          setOriginalImgs([...originalImgs, ...urls]);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const onClickToDeleteOnCreate = (e: any) => {\r\n    if (useFor === \"CREATE\" && setOriginalImgs) {\r\n      let section = e.target.parentNode;\r\n      if (section.tagName === \"svg\") {\r\n        section = section.parentNode.parentNode;\r\n      }\r\n      if (section.tagName === \"DIV\") {\r\n        section = section.parentNode;\r\n      }\r\n      const sectionId = section.id.split(\"-\")[1];\r\n      const sectionImg = imgGrid[+sectionId];\r\n      const updatedImgGrid = imgGrid.filter(\r\n        (eachImg) => eachImg !== sectionImg\r\n      );\r\n      setImgGrid([...updatedImgGrid]);\r\n      setOriginalImgs([...updatedImgGrid]);\r\n    }\r\n  };\r\n\r\n  const onClickToFullSize = (e: any) => {\r\n    let section = e.target.parentNode;\r\n    if (section.tagName === \"svg\") {\r\n      section = section.parentNode.parentNode;\r\n    }\r\n    if (section.tagName === \"DIV\") {\r\n      section = section.parentNode;\r\n    }\r\n\r\n    const id = section.id.split(\"-\")[1];\r\n    const img = imgGrid[+id];\r\n    setCurrentFullImg(img);\r\n    setFullsizeMode(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setImgGrid([...originalImgs]);\r\n  }, []);\r\n\r\n  console.log(currentFullImg);\r\n\r\n  return (\r\n    <div className=\"min-h-screen w-full bg-gray-800 z-50 \">\r\n      {fullsizeMode && (\r\n        <AvatarFullsize\r\n          avatarUrl={currentFullImg}\r\n          fullsizeMode={fullsizeMode}\r\n          setFullsizeMode={setFullsizeMode}\r\n        />\r\n      )}\r\n      {/* grid mode changer */}\r\n      <div className=\"fixed bottom-0 right-0 m-5 flex flex-col items-center justify-end\">\r\n        <FontAwesomeIcon\r\n          onClick={() => {\r\n            setExitImgGrid(true);\r\n            setImgGridMode(ImgGridMode.plus);\r\n          }}\r\n          icon={faCheck}\r\n          className=\" text-3xl text-teal-500 cursor-pointer \"\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={() => setImgGridMode(ImgGridMode.delete)}\r\n          icon={faTrash}\r\n          className=\" text-3xl text-rose-500 my-10 cursor-pointer\"\r\n        />\r\n        <label htmlFor=\"imgUpload\">\r\n          <FontAwesomeIcon\r\n            onClick={() => setImgGridMode(ImgGridMode.plus)}\r\n            icon={faPlus}\r\n            className=\" text-3xl text-gray-200  cursor-pointer\"\r\n          />\r\n        </label>\r\n        <input\r\n          ref={uploadRef}\r\n          onInput={useFor === \"EDIT\" ? uploadImgUpdate : uploadImgCreate}\r\n          type=\"file\"\r\n          id=\"imgUpload\"\r\n          name=\"imgUpload\"\r\n          multiple\r\n          accept={\"image/*\"}\r\n          className=\"hidden opacity-0 w-0 h-0\"\r\n        />\r\n      </div>\r\n\r\n      {/* grid */}\r\n      <main className=\"max-w-screen-xl min-h-screen  mr-20 2xl:mx-auto grid grid-rows-3 md:grid-cols-3 gap-5 p-5\">\r\n        {imgGrid &&\r\n          imgGrid.length !== 0 &&\r\n          imgGrid.map((eachImg, index) => (\r\n            <section\r\n              id={`ImgGridItem-${index}`}\r\n              key={index}\r\n              className=\" relative rounded-xl  hover:shadow-2xl transition-shadow overflow-hidden\"\r\n            >\r\n              <div\r\n                onClick={onClickToFullSize}\r\n                className=\"py-32 bg-cover bg-center transform hover:scale-125 transition-transform duration-500 cursor-pointer\"\r\n                style={{ backgroundImage: `url(${eachImg})` }}\r\n              ></div>\r\n              {imgGridMode === ImgGridMode.delete && (\r\n                <div\r\n                  onClick={\r\n                    useFor === \"EDIT\"\r\n                      ? onClickToDeleteOnUpdate\r\n                      : onClickToDeleteOnCreate\r\n                  }\r\n                  className=\"absolute top-0 left-0 w-full h-full flex justify-center items-center cursor-pointer\"\r\n                >\r\n                  <FontAwesomeIcon\r\n                    icon={faTimes}\r\n                    className=\"text-5xl text-amber-300 \"\r\n                  />\r\n                </div>\r\n              )}\r\n            </section>\r\n          ))}\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\constants.ts",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\FormButton.tsx",[],{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","severity":1,"message":"209","line":2,"column":15,"nodeType":"210","messageId":"211","endLine":2,"endColumn":30},{"ruleId":"208","severity":1,"message":"212","line":6,"column":10,"nodeType":"210","messageId":"211","endLine":6,"endColumn":20},{"ruleId":"208","severity":1,"message":"213","line":9,"column":10,"nodeType":"210","messageId":"211","endLine":9,"endColumn":14},{"ruleId":"214","severity":1,"message":"215","line":74,"column":34,"nodeType":"216","messageId":"217","endLine":74,"endColumn":35,"suggestions":"218"},{"ruleId":"214","severity":1,"message":"215","line":74,"column":59,"nodeType":"216","messageId":"217","endLine":74,"endColumn":60,"suggestions":"219"},{"ruleId":"208","severity":1,"message":"212","line":5,"column":10,"nodeType":"210","messageId":"211","endLine":5,"endColumn":20},{"ruleId":"214","severity":1,"message":"215","line":82,"column":34,"nodeType":"216","messageId":"217","endLine":82,"endColumn":35,"suggestions":"220"},{"ruleId":"214","severity":1,"message":"215","line":82,"column":59,"nodeType":"216","messageId":"217","endLine":82,"endColumn":60,"suggestions":"221"},{"ruleId":"222","severity":1,"message":"223","line":49,"column":6,"nodeType":"224","endLine":49,"endColumn":8,"suggestions":"225"},{"ruleId":"222","severity":1,"message":"226","line":56,"column":6,"nodeType":"224","endLine":56,"endColumn":8,"suggestions":"227"},{"ruleId":"208","severity":1,"message":"228","line":1,"column":17,"nodeType":"210","messageId":"211","endLine":1,"endColumn":26},{"ruleId":"208","severity":1,"message":"229","line":1,"column":28,"nodeType":"210","messageId":"211","endLine":1,"endColumn":34},{"ruleId":"208","severity":1,"message":"230","line":1,"column":10,"nodeType":"210","messageId":"211","endLine":1,"endColumn":20},{"ruleId":"208","severity":1,"message":"231","line":2,"column":10,"nodeType":"210","messageId":"211","endLine":2,"endColumn":15},{"ruleId":"222","severity":1,"message":"232","line":94,"column":6,"nodeType":"224","endLine":94,"endColumn":16,"suggestions":"233"},{"ruleId":"208","severity":1,"message":"234","line":11,"column":3,"nodeType":"210","messageId":"211","endLine":11,"endColumn":9},{"ruleId":"208","severity":1,"message":"235","line":13,"column":3,"nodeType":"210","messageId":"211","endLine":13,"endColumn":9},{"ruleId":"222","severity":1,"message":"236","line":124,"column":6,"nodeType":"224","endLine":124,"endColumn":12,"suggestions":"237"},{"ruleId":"222","severity":1,"message":"238","line":135,"column":6,"nodeType":"224","endLine":135,"endColumn":8,"suggestions":"239"},{"ruleId":"222","severity":1,"message":"240","line":12,"column":6,"nodeType":"224","endLine":12,"endColumn":8,"suggestions":"241"},{"ruleId":"208","severity":1,"message":"242","line":4,"column":3,"nodeType":"210","messageId":"211","endLine":4,"endColumn":10},{"ruleId":"208","severity":1,"message":"234","line":5,"column":3,"nodeType":"210","messageId":"211","endLine":5,"endColumn":9},{"ruleId":"208","severity":1,"message":"243","line":6,"column":3,"nodeType":"210","messageId":"211","endLine":6,"endColumn":10},{"ruleId":"222","severity":1,"message":"236","line":107,"column":6,"nodeType":"224","endLine":107,"endColumn":22,"suggestions":"244"},{"ruleId":"222","severity":1,"message":"236","line":113,"column":6,"nodeType":"224","endLine":113,"endColumn":16,"suggestions":"245"},{"ruleId":"208","severity":1,"message":"212","line":4,"column":10,"nodeType":"210","messageId":"211","endLine":4,"endColumn":20},{"ruleId":"222","severity":1,"message":"246","line":150,"column":6,"nodeType":"224","endLine":150,"endColumn":16,"suggestions":"247"},{"ruleId":"248","severity":1,"message":"249","line":348,"column":11,"nodeType":"250","endLine":351,"endColumn":12},{"ruleId":"208","severity":1,"message":"251","line":15,"column":3,"nodeType":"210","messageId":"211","endLine":15,"endColumn":15},{"ruleId":"208","severity":1,"message":"252","line":78,"column":35,"nodeType":"210","messageId":"211","endLine":78,"endColumn":41},{"ruleId":"208","severity":1,"message":"253","line":103,"column":9,"nodeType":"210","messageId":"211","endLine":103,"endColumn":33},{"ruleId":"222","severity":1,"message":"254","line":218,"column":6,"nodeType":"224","endLine":218,"endColumn":8,"suggestions":"255"},{"ruleId":"256","severity":1,"message":"257","line":263,"column":17,"nodeType":"250","endLine":263,"endColumn":80},{"ruleId":"208","severity":1,"message":"229","line":1,"column":21,"nodeType":"210","messageId":"211","endLine":1,"endColumn":27},{"ruleId":"208","severity":1,"message":"213","line":4,"column":10,"nodeType":"210","messageId":"211","endLine":4,"endColumn":14},{"ruleId":"208","severity":1,"message":"258","line":36,"column":36,"nodeType":"210","messageId":"211","endLine":36,"endColumn":47},{"ruleId":"222","severity":1,"message":"259","line":113,"column":6,"nodeType":"224","endLine":113,"endColumn":16,"suggestions":"260"},{"ruleId":"256","severity":1,"message":"257","line":125,"column":15,"nodeType":"250","endLine":125,"endColumn":76},{"ruleId":"256","severity":1,"message":"257","line":128,"column":15,"nodeType":"250","endLine":131,"endColumn":17},{"ruleId":"256","severity":1,"message":"257","line":38,"column":7,"nodeType":"250","endLine":38,"endColumn":64},{"ruleId":"208","severity":1,"message":"261","line":9,"column":8,"nodeType":"210","messageId":"211","endLine":9,"endColumn":13},{"ruleId":"222","severity":1,"message":"262","line":191,"column":6,"nodeType":"224","endLine":191,"endColumn":8,"suggestions":"263"},{"ruleId":"222","severity":1,"message":"264","line":195,"column":6,"nodeType":"224","endLine":195,"endColumn":19,"suggestions":"265"},{"ruleId":"222","severity":1,"message":"264","line":202,"column":6,"nodeType":"224","endLine":202,"endColumn":19,"suggestions":"266"},{"ruleId":"256","severity":1,"message":"257","line":237,"column":19,"nodeType":"250","endLine":240,"endColumn":21},{"ruleId":"222","severity":1,"message":"267","line":242,"column":6,"nodeType":"224","endLine":242,"endColumn":8,"suggestions":"268"},"no-native-reassign",["269"],"no-negated-in-lhs",["270"],"@typescript-eslint/no-unused-vars","'useApolloClient' is defined but never used.","Identifier","unusedVar","'isLoggedIn' is defined but never used.","'data' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["271","272"],["273","274"],["275","276"],["277","278"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'page' and 'refetch'. Either include them or remove the dependency array.","ArrayExpression",["279"],"React Hook useEffect has missing dependencies: 'code' and 'confirmVerificationCodeMutation'. Either include them or remove the dependency array.",["280"],"'useEffect' is defined but never used.","'useRef' is defined but never used.","'useHistory' is defined but never used.","'useMe' is defined but never used.","React Hook useEffect has a missing dependency: 'triggerMenu'. Either include it or remove the dependency array.",["281"],"'faPlus' is defined but never used.","'faEdit' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["282"],"React Hook useEffect has missing dependencies: 'data?.me.user?.id', 'refetch', 'refetchMe', and 'sellingProductHistoryQuery'. Either include them or remove the dependency array.",["283"],"React Hook useEffect has missing dependencies: 'data?.me.user?.isVerified', 'history', and 'loading'. Either include them or remove the dependency array.",["284"],"'faCheck' is defined but never used.","'faTimes' is defined but never used.",["285"],["286"],"React Hook useEffect has missing dependencies: 'history' and 'userLoading'. Either include them or remove the dependency array.",["287"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'faArrowRight' is defined but never used.","'called' is assigned a value but never used.","'onClickPreviewImageRight' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history', 'userData?.me.user?.isVerified', and 'userLoading'. Either include them or remove the dependency array.",["288"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'userLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history', 'id', and 'setValue'. Either include them or remove the dependency array.",["289"],"'axios' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'id', 'productData?.findProductById.product', 'userData?.me.user', and 'userLoading'. Either include them or remove the dependency array.",["290"],"React Hook useEffect has a missing dependency: 'setProductValueToInput'. Either include it or remove the dependency array.",["291"],["292"],"React Hook useEffect has a missing dependency: 'originalImgs'. Either include it or remove the dependency array. If 'setImgGrid' needs the current value of 'originalImgs', you can also switch to useReducer instead of useState and read 'originalImgs' in the reducer.",["293"],"no-global-assign","no-unsafe-negation",{"messageId":"294","fix":"295","desc":"296"},{"messageId":"297","fix":"298","desc":"299"},{"messageId":"294","fix":"300","desc":"296"},{"messageId":"297","fix":"301","desc":"299"},{"messageId":"294","fix":"302","desc":"296"},{"messageId":"297","fix":"303","desc":"299"},{"messageId":"294","fix":"304","desc":"296"},{"messageId":"297","fix":"305","desc":"299"},{"desc":"306","fix":"307"},{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"desc":"312","fix":"313"},{"desc":"314","fix":"315"},{"desc":"316","fix":"317"},{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},"removeEscape",{"range":"336","text":"337"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"338","text":"339"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"340","text":"337"},{"range":"341","text":"339"},{"range":"342","text":"337"},{"range":"343","text":"339"},{"range":"344","text":"337"},{"range":"345","text":"339"},"Update the dependencies array to be: [page, refetch]",{"range":"346","text":"347"},"Update the dependencies array to be: [code, confirmVerificationCodeMutation]",{"range":"348","text":"349"},"Update the dependencies array to be: [location, triggerMenu]",{"range":"350","text":"351"},"Update the dependencies array to be: [data, history]",{"range":"352","text":"353"},"Update the dependencies array to be: [data?.me.user?.id, refetch, refetchMe, sellingProductHistoryQuery]",{"range":"354","text":"355"},"Update the dependencies array to be: [data?.me.user?.isVerified, history, loading]",{"range":"356","text":"357"},"Update the dependencies array to be: [userData, data, history]",{"range":"358","text":"359"},"Update the dependencies array to be: [history, userData]",{"range":"360","text":"361"},"Update the dependencies array to be: [history, userData, userLoading]",{"range":"362","text":"363"},"Update the dependencies array to be: [history, userData?.me.user?.isVerified, userLoading]",{"range":"364","text":"365"},"Update the dependencies array to be: [history, id, setValue, userData]",{"range":"366","text":"367"},"Update the dependencies array to be: [history, id, productData?.findProductById.product, userData?.me.user, userLoading]",{"range":"368","text":"369"},"Update the dependencies array to be: [productData, setProductValueToInput]",{"range":"370","text":"371"},"Update the dependencies array to be: [exitImgGrid, setProductValueToInput]",{"range":"372","text":"373"},"Update the dependencies array to be: [originalImgs]",{"range":"374","text":"375"},[2167,2168],"",[2167,2167],"\\",[2192,2193],[2192,2192],[2276,2277],[2276,2276],[2301,2302],[2301,2301],[1317,1319],"[page, refetch]",[1570,1572],"[code, confirmVerificationCodeMutation]",[2653,2663],"[location, triggerMenu]",[3638,3644],"[data, history]",[3901,3903],"[data?.me.user?.id, refetch, refetchMe, sellingProductHistoryQuery]",[371,373],"[data?.me.user?.isVerified, history, loading]",[3187,3203],"[userData, data, history]",[3334,3344],"[history, userData]",[4014,4024],"[history, userData, userLoading]",[6328,6330],"[history, userData?.me.user?.isVerified, userLoading]",[3384,3394],"[history, id, setValue, userData]",[5583,5585],"[history, id, productData?.findProductById.product, userData?.me.user, userLoading]",[5648,5661],"[productData, setProductValueToInput]",[5795,5808],"[exitImgGrid, setProductValueToInput]",[7340,7342],"[originalImgs]"]