[{"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\index.tsx":"1","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\App.tsx":"2","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\apollo.ts":"3","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedOutRouter.tsx":"4","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedInRouter.tsx":"5","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\LogIn.tsx":"6","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\CreateAccount.tsx":"7","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\NotFound.tsx":"8","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Home.tsx":"9","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\ValidateCode.tsx":"10","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\hooks\\useMe.tsx":"11","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\ProductGridItem.tsx":"12","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\utils.ts":"13","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\Menu.tsx":"14"},{"size":474,"mtime":1610371989440,"results":"15","hashOfConfig":"16"},{"size":410,"mtime":1610427390698,"results":"17","hashOfConfig":"16"},{"size":651,"mtime":1610427179696,"results":"18","hashOfConfig":"16"},{"size":592,"mtime":1610367065748,"results":"19","hashOfConfig":"16"},{"size":675,"mtime":1610521835186,"results":"20","hashOfConfig":"16"},{"size":4268,"mtime":1610430787444,"results":"21","hashOfConfig":"16"},{"size":5031,"mtime":1610453045385,"results":"22","hashOfConfig":"16"},{"size":664,"mtime":1610367663751,"results":"23","hashOfConfig":"16"},{"size":3323,"mtime":1610520847173,"results":"24","hashOfConfig":"16"},{"size":2210,"mtime":1610431505480,"results":"25","hashOfConfig":"16"},{"size":338,"mtime":1610428014914,"results":"26","hashOfConfig":"16"},{"size":1926,"mtime":1610521386623,"results":"27","hashOfConfig":"16"},{"size":363,"mtime":1610453934284,"results":"28","hashOfConfig":"16"},{"size":1807,"mtime":1610523761572,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"6h5vn9",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\index.tsx",[],["62","63"],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\App.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\apollo.ts",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedOutRouter.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedInRouter.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\LogIn.tsx",["64","65","66","67"],"import React from \"react\";\r\nimport { gql, useApolloClient, useMutation } from \"@apollo/client\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { logIn, logInVariables } from \"../__generated__/logIn\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { isLoggedIn } from \"../apollo\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { LogInInput } from \"../__generated__/globalTypes\";\r\n\r\nconst LOG_IN_MUTATION = gql`\r\n  mutation logIn($input: LogInInput!) {\r\n    logIn(input: $input) {\r\n      ok\r\n      error\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LogIn = () => {\r\n  const { register, getValues, errors, handleSubmit } = useForm<LogInInput>({\r\n    mode: \"onChange\",\r\n  });\r\n  const onCompleted = (data: logIn) => {\r\n    const {\r\n      logIn: { ok, token },\r\n    } = data;\r\n\r\n    if (ok && token) {\r\n      console.log(token);\r\n      localStorage.setItem(\"token\", token);\r\n      isLoggedIn(true);\r\n      window.location.reload();\r\n    }\r\n  };\r\n  const onClick = () => {\r\n    const { email, password } = getValues();\r\n    logInMutation({\r\n      variables: {\r\n        input: {\r\n          email,\r\n          password,\r\n        },\r\n      },\r\n    });\r\n  };\r\n  const [logInMutation, { data, error: mutationError }] = useMutation<\r\n    logIn,\r\n    logInVariables\r\n  >(LOG_IN_MUTATION, {\r\n    onCompleted,\r\n  });\r\n  return (\r\n    <div className=\" h-screen  bg-indigo-500 flex items-center justify-center\">\r\n      <Helmet>\r\n        <title>로그인 | front-end-practice</title>\r\n      </Helmet>\r\n      <div className=\" max-w-screen-sm  w-full  px-10 pt-10  pb-5  shadow-xl bg-white rounded-md  mx-10 \">\r\n        <form\r\n          onSubmit={handleSubmit(onClick)}\r\n          className=\"flex flex-col w-full \"\r\n        >\r\n          <h2 className=\"mb-5 text-center font-semibold text-2xl text-indigo-600\">\r\n            로그인\r\n          </h2>\r\n          <input\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"이메일은 로그인 하는데 필수적인 요소입니다.\",\r\n              pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n            })}\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"이메일\"\r\n            required\r\n          />\r\n          {errors.email?.types?.pattern && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              이메일 형식이 잘못되었습니다.\r\n            </h4>\r\n          )}\r\n          {errors.email?.message && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.email?.message}\r\n            </h4>\r\n          )}\r\n          <input\r\n            className=\"py-5 px-3  mb-3 w-full focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"비밀번호는 로그인 하는데 필수적인 요소입니다.\",\r\n            })}\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"비밀번호\"\r\n            required\r\n          />\r\n          {errors.password?.message && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.password?.message}\r\n            </h4>\r\n          )}\r\n          <button\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black hover:bg-indigo-700 hover:text-white transition-colors\"\r\n            type=\"submit\"\r\n          >\r\n            로그인\r\n          </button>\r\n          {mutationError && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {mutationError.message}\r\n            </h4>\r\n          )}\r\n        </form>\r\n        <div>\r\n          <h3 className=\"text-center\">\r\n            아직 회원이 아니신가요?{\" \"}\r\n            <Link\r\n              className=\"text-indigo-700 font-semibold hover:underline\"\r\n              to=\"/create-account\"\r\n            >\r\n              여기\r\n            </Link>\r\n            를 눌러 회원가입 하세요!\r\n          </h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\CreateAccount.tsx",["68","69","70"],"import React from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { isLoggedIn } from \"../apollo\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { CreateAccountInput } from \"../__generated__/globalTypes\";\r\nimport {\r\n  createAccount,\r\n  createAccountVariables,\r\n} from \"../__generated__/createAccount\";\r\n\r\nconst CREATE_ACCOUNT_MUTATION = gql`\r\n  mutation createAccount($input: CreateAccountInput!) {\r\n    createAccount(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CreateAccount = () => {\r\n  const history = useHistory();\r\n  const {\r\n    register,\r\n    getValues,\r\n    errors,\r\n    handleSubmit,\r\n  } = useForm<CreateAccountInput>({\r\n    mode: \"onChange\",\r\n  });\r\n  const onClick = () => {\r\n    const { email, password, username } = getValues();\r\n    createAccountMutation({\r\n      variables: {\r\n        input: {\r\n          email,\r\n          password,\r\n          username,\r\n        },\r\n      },\r\n    });\r\n  };\r\n  const onCompleted = (data: createAccount) => {\r\n    const {\r\n      createAccount: { ok },\r\n    } = data;\r\n\r\n    if (ok) {\r\n      alert(\"회원가입 성공! 로그인 해주세요\");\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n  const [createAccountMutation, { data }] = useMutation<\r\n    createAccount,\r\n    createAccountVariables\r\n  >(CREATE_ACCOUNT_MUTATION, {\r\n    onCompleted,\r\n  });\r\n  console.log(data);\r\n\r\n  return (\r\n    <div className=\" h-screen  bg-indigo-500 flex items-center justify-center\">\r\n      <Helmet>\r\n        <title>회원가입 | front-end-practice</title>\r\n      </Helmet>\r\n      <div className=\" max-w-screen-sm w-full   px-10 pt-10  pb-5  shadow-xl bg-white rounded-md  mx-10 \">\r\n        <form\r\n          onSubmit={handleSubmit(onClick)}\r\n          className=\"flex flex-col w-full \"\r\n        >\r\n          <h2 className=\"mb-5 text-center font-semibold text-2xl text-indigo-600\">\r\n            회원가입\r\n          </h2>\r\n          <input\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"이메일은 회원가입 하는데 필수적인 요소입니다.\",\r\n              pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n            })}\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"이메일\"\r\n            required\r\n          />\r\n          {errors.email?.types?.pattern && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              이메일 형식이 잘못되었습니다.\r\n            </h4>\r\n          )}\r\n          {errors.email?.message && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.email?.message}\r\n            </h4>\r\n          )}\r\n          <input\r\n            className=\"py-5 px-3  mb-3 w-full focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"닉네임은 회원가입 하는데 필수적인 요소입니다.\",\r\n            })}\r\n            type=\"text\"\r\n            name=\"username\"\r\n            placeholder=\"닉네임\"\r\n            required\r\n          />\r\n          {errors.username?.message && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.username?.message}\r\n            </h4>\r\n          )}\r\n          <input\r\n            className=\"py-5 px-3  mb-3 w-full focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"비밀번호는 회원가입 하는데 필수적인 요소입니다.\",\r\n            })}\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"비밀번호\"\r\n            required\r\n          />\r\n          {errors.password?.message && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.password?.message}\r\n            </h4>\r\n          )}\r\n          <button\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black hover:bg-indigo-700 hover:text-white transition-colors\"\r\n            type=\"submit\"\r\n          >\r\n            회원가입\r\n          </button>\r\n          {data?.createAccount.error && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {data?.createAccount.error}\r\n            </h4>\r\n          )}\r\n        </form>\r\n        <div>\r\n          <h3 className=\"text-center\">\r\n            이미 회원이신가요?{\" \"}\r\n            <Link\r\n              className=\"text-indigo-700 font-semibold hover:underline\"\r\n              to=\"/\"\r\n            >\r\n              여기\r\n            </Link>\r\n            를 눌러 로그인 하세요!\r\n          </h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\NotFound.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Home.tsx",["71"],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\ValidateCode.tsx",["72"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport {\r\n  confirmVerificationCode,\r\n  confirmVerificationCodeVariables,\r\n} from \"../__generated__/confirmVerificationCode\";\r\n\r\nconst CONFIRM_VALIDATION_CODE_MUTATION = gql`\r\n  mutation confirmVerificationCode($input: ConfirmVerificationCodeInput!) {\r\n    confirmVerificationCode(input: $input) {\r\n      ok\r\n      error\r\n      userId\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ValidationCode = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const client = useApolloClient();\r\n  const code = location.search.split(\"?code=\")[1];\r\n  const onCompleted = (data: confirmVerificationCode) => {\r\n    const {\r\n      confirmVerificationCode: { ok, userId },\r\n    } = data;\r\n    if (ok && userId) {\r\n      client.writeFragment({\r\n        id: `User:${userId}`,\r\n        fragment: gql`\r\n          fragment UserVerifCodeFragment on User {\r\n            isVerified\r\n          }\r\n        `,\r\n        data: {\r\n          isVerified: true,\r\n        },\r\n      });\r\n      alert(\"성공적으로 인증 되었습니다.\");\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n  const [confirmVerificationCodeMutation, { loading, data }] = useMutation<\r\n    confirmVerificationCode,\r\n    confirmVerificationCodeVariables\r\n  >(CONFIRM_VALIDATION_CODE_MUTATION, { onCompleted });\r\n  useEffect(() => {\r\n    confirmVerificationCodeMutation({\r\n      variables: {\r\n        input: {\r\n          code,\r\n        },\r\n      },\r\n    });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <div className=\"h-screen flex flex-col justify-center items-center bg-indigo-500\">\r\n        {loading && (\r\n          <h1 className=\"text-white font-semibold text-2xl\">Loading...</h1>\r\n        )}\r\n        {!loading && data?.confirmVerificationCode.error && (\r\n          <>\r\n            <h1 className=\"text-white font-semibold text-2xl\">\r\n              {data?.confirmVerificationCode.error}\r\n            </h1>\r\n            <Link className=\"text-white mt-10\" to=\"/\">\r\n              홈으로 가기\r\n            </Link>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\hooks\\useMe.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\ProductGridItem.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\utils.ts",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\Menu.tsx",["73","74"],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":2,"column":15,"nodeType":"81","messageId":"82","endLine":2,"endColumn":30},{"ruleId":"79","severity":1,"message":"83","line":47,"column":27,"nodeType":"81","messageId":"82","endLine":47,"endColumn":31},{"ruleId":"84","severity":1,"message":"85","line":70,"column":34,"nodeType":"86","messageId":"87","endLine":70,"endColumn":35,"suggestions":"88"},{"ruleId":"84","severity":1,"message":"85","line":70,"column":59,"nodeType":"86","messageId":"87","endLine":70,"endColumn":60,"suggestions":"89"},{"ruleId":"79","severity":1,"message":"90","line":5,"column":10,"nodeType":"81","messageId":"82","endLine":5,"endColumn":20},{"ruleId":"84","severity":1,"message":"85","line":79,"column":34,"nodeType":"86","messageId":"87","endLine":79,"endColumn":35,"suggestions":"91"},{"ruleId":"84","severity":1,"message":"85","line":79,"column":59,"nodeType":"86","messageId":"87","endLine":79,"endColumn":60,"suggestions":"92"},{"ruleId":"79","severity":1,"message":"93","line":1,"column":15,"nodeType":"81","messageId":"82","endLine":1,"endColumn":27},{"ruleId":"94","severity":1,"message":"95","line":56,"column":6,"nodeType":"96","endLine":56,"endColumn":8,"suggestions":"97"},{"ruleId":"79","severity":1,"message":"83","line":9,"column":11,"nodeType":"81","messageId":"82","endLine":9,"endColumn":15},{"ruleId":"79","severity":1,"message":"98","line":9,"column":17,"nodeType":"81","messageId":"82","endLine":9,"endColumn":24},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"@typescript-eslint/no-unused-vars","'useApolloClient' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["101","102"],["103","104"],"'isLoggedIn' is defined but never used.",["105","106"],["107","108"],"'useLazyQuery' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'code' and 'confirmVerificationCodeMutation'. Either include them or remove the dependency array.","ArrayExpression",["109"],"'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"110","fix":"111","desc":"112"},{"messageId":"113","fix":"114","desc":"115"},{"messageId":"110","fix":"116","desc":"112"},{"messageId":"113","fix":"117","desc":"115"},{"messageId":"110","fix":"118","desc":"112"},{"messageId":"113","fix":"119","desc":"115"},{"messageId":"110","fix":"120","desc":"112"},{"messageId":"113","fix":"121","desc":"115"},{"desc":"122","fix":"123"},"removeEscape",{"range":"124","text":"125"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"126","text":"127"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"128","text":"125"},{"range":"129","text":"127"},{"range":"130","text":"125"},{"range":"131","text":"127"},{"range":"132","text":"125"},{"range":"133","text":"127"},"Update the dependencies array to be: [code, confirmVerificationCodeMutation]",{"range":"134","text":"135"},[2097,2098],"",[2097,2097],"\\",[2122,2123],[2122,2122],[2231,2232],[2231,2231],[2256,2257],[2256,2256],[1570,1572],"[code, confirmVerificationCodeMutation]"]