[{"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\index.tsx":"1","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\App.tsx":"2","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\apollo.ts":"3","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedOutRouter.tsx":"4","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedInRouter.tsx":"5","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\LogIn.tsx":"6","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\CreateAccount.tsx":"7","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\NotFound.tsx":"8","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Home.tsx":"9","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\ValidateCode.tsx":"10","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\hooks\\useMe.tsx":"11","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\ProductGridItem.tsx":"12","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\utils.ts":"13","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\Menu.tsx":"14","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\fragment.ts":"15","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Me.tsx":"16","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Messages.tsx":"17","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\UserProfile.tsx":"18","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\NotValidUser.tsx":"19","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\WalletHistory.tsx":"20","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Product.tsx":"21","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoadingSpinner.tsx":"22","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\CreateProduct.tsx":"23","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\FullSizeImgBoard.tsx":"24","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\SellingHistory.tsx":"25","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\BackButton.tsx":"26","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\EditProfile.tsx":"27","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\avatarFullsize.tsx":"28","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\FormError.tsx":"29","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\EditProduct.tsx":"30","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\ImgGrid.tsx":"31","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\constants.ts":"32","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\FormButton.tsx":"33","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\MsgRoomStick.tsx":"34","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\MsgRoom.tsx":"35","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\msgBlock.tsx":"36","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\__generated__\\globalTypes.ts":"37","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\newMsg.tsx":"38"},{"size":474,"mtime":1610371989440,"results":"39","hashOfConfig":"40"},{"size":410,"mtime":1610937151230,"results":"41","hashOfConfig":"40"},{"size":1669,"mtime":1612439305303,"results":"42","hashOfConfig":"40"},{"size":592,"mtime":1610367065748,"results":"43","hashOfConfig":"40"},{"size":4954,"mtime":1612443237297,"results":"44","hashOfConfig":"40"},{"size":4370,"mtime":1611720567598,"results":"45","hashOfConfig":"40"},{"size":5046,"mtime":1611720399755,"results":"46","hashOfConfig":"40"},{"size":668,"mtime":1610891671995,"results":"47","hashOfConfig":"40"},{"size":2449,"mtime":1612313696036,"results":"48","hashOfConfig":"40"},{"size":2333,"mtime":1611721261903,"results":"49","hashOfConfig":"40"},{"size":821,"mtime":1612442539856,"results":"50","hashOfConfig":"40"},{"size":1329,"mtime":1612435862553,"results":"51","hashOfConfig":"40"},{"size":1055,"mtime":1611551730027,"results":"52","hashOfConfig":"40"},{"size":7366,"mtime":1612413159860,"results":"53","hashOfConfig":"40"},{"size":667,"mtime":1612397881577,"results":"54","hashOfConfig":"40"},{"size":12784,"mtime":1612426354972,"results":"55","hashOfConfig":"40"},{"size":2072,"mtime":1612441500600,"results":"56","hashOfConfig":"40"},{"size":8305,"mtime":1612151558959,"results":"57","hashOfConfig":"40"},{"size":2514,"mtime":1611721002562,"results":"58","hashOfConfig":"40"},{"size":2024,"mtime":1611148375359,"results":"59","hashOfConfig":"40"},{"size":14503,"mtime":1612443045946,"results":"60","hashOfConfig":"40"},{"size":422,"mtime":1610938247510,"results":"61","hashOfConfig":"40"},{"size":12549,"mtime":1612442551710,"results":"62","hashOfConfig":"40"},{"size":4126,"mtime":1611800621765,"results":"63","hashOfConfig":"40"},{"size":995,"mtime":1611718128697,"results":"64","hashOfConfig":"40"},{"size":712,"mtime":1612437050995,"results":"65","hashOfConfig":"40"},{"size":6144,"mtime":1612414908041,"results":"66","hashOfConfig":"40"},{"size":1273,"mtime":1611801977772,"results":"67","hashOfConfig":"40"},{"size":291,"mtime":1611809202510,"results":"68","hashOfConfig":"40"},{"size":10964,"mtime":1612416211919,"results":"69","hashOfConfig":"40"},{"size":10274,"mtime":1612436264737,"results":"70","hashOfConfig":"40"},{"size":55,"mtime":1611839084493,"results":"71","hashOfConfig":"40"},{"size":889,"mtime":1611917757272,"results":"72","hashOfConfig":"40"},{"size":1923,"mtime":1612439674122,"results":"73","hashOfConfig":"40"},{"size":6291,"mtime":1612441358867,"results":"74","hashOfConfig":"40"},{"size":1371,"mtime":1612416102119,"results":"75","hashOfConfig":"40"},{"size":1755,"mtime":1612442550780,"results":"76","hashOfConfig":"40"},{"size":1130,"mtime":1612441392859,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"6h5vn9",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"80"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"80"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"80"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"80"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"80"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"80"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\index.tsx",[],["169","170"],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\App.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\apollo.ts",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedOutRouter.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoggedInRouter.tsx",["171"],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\LogIn.tsx",["172","173","174","175","176"],"import React from \"react\";\r\nimport { gql, useApolloClient, useMutation } from \"@apollo/client\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { logIn, logInVariables } from \"../__generated__/logIn\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { isLoggedIn } from \"../apollo\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { LogInInput } from \"../__generated__/globalTypes\";\r\nimport { data } from \"autoprefixer\";\r\n\r\nconst LOG_IN_MUTATION = gql`\r\n  mutation logIn($input: LogInInput!) {\r\n    logIn(input: $input) {\r\n      ok\r\n      error\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LogIn = () => {\r\n  const { register, getValues, errors, handleSubmit } = useForm<LogInInput>({\r\n    mode: \"onChange\",\r\n  });\r\n  const onCompleted = (data: logIn) => {\r\n    const {\r\n      logIn: { ok, token, error },\r\n    } = data;\r\n\r\n    if (!ok && error) {\r\n      alert(error);\r\n    }\r\n\r\n    if (ok && token) {\r\n      alert(\"로그인 성공!\");\r\n      localStorage.setItem(\"token\", token);\r\n      window.location.reload();\r\n    }\r\n  };\r\n  const onClick = async () => {\r\n    const { email, password } = getValues();\r\n    await logInMutation({\r\n      variables: {\r\n        input: {\r\n          email,\r\n          password,\r\n        },\r\n      },\r\n    });\r\n  };\r\n  const [logInMutation, { error: mutationError }] = useMutation<\r\n    logIn,\r\n    logInVariables\r\n  >(LOG_IN_MUTATION, {\r\n    onCompleted,\r\n  });\r\n  return (\r\n    <div className=\" min-h-screen   flex items-center justify-center\">\r\n      <Helmet>\r\n        <title>로그인 | front-end-practice</title>\r\n      </Helmet>\r\n      <div className=\" max-w-screen-sm  w-full  px-10 pt-10  pb-5  shadow-xl bg-white rounded-md  mx-10 \">\r\n        <form\r\n          onSubmit={handleSubmit(onClick)}\r\n          className=\"flex flex-col w-full \"\r\n        >\r\n          <h2 className=\"mb-5 text-center font-semibold text-2xl text-indigo-600\">\r\n            로그인\r\n          </h2>\r\n          <input\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"이메일은 로그인 하는데 필수적인 요소입니다.\",\r\n              pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n            })}\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"이메일\"\r\n            required\r\n          />\r\n          {errors.email?.type === \"pattern\" && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              이메일 형식이 잘못되었습니다.\r\n            </h4>\r\n          )}\r\n          {errors.email?.message && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.email?.message}\r\n            </h4>\r\n          )}\r\n          <input\r\n            className=\"py-5 px-3  mb-3 w-full focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"비밀번호는 로그인 하는데 필수적인 요소입니다.\",\r\n            })}\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"비밀번호\"\r\n            required\r\n          />\r\n          {errors.password?.type === \"required\" && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.password?.message}\r\n            </h4>\r\n          )}\r\n          <button\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black hover:bg-indigo-700 hover:text-white transition-colors\"\r\n            type=\"submit\"\r\n          >\r\n            로그인\r\n          </button>\r\n          {}\r\n          {mutationError && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {mutationError}\r\n            </h4>\r\n          )}\r\n        </form>\r\n        <div>\r\n          <h3 className=\"text-center\">\r\n            아직 회원이 아니신가요?{\" \"}\r\n            <Link\r\n              className=\"text-indigo-700 font-semibold hover:underline\"\r\n              to=\"/create-account\"\r\n            >\r\n              여기\r\n            </Link>\r\n            를 눌러 회원가입 하세요!\r\n          </h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\CreateAccount.tsx",["177","178","179"],"import React from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { isLoggedIn } from \"../apollo\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { CreateAccountInput } from \"../__generated__/globalTypes\";\r\nimport {\r\n  createAccount,\r\n  createAccountVariables,\r\n} from \"../__generated__/createAccount\";\r\n\r\nconst CREATE_ACCOUNT_MUTATION = gql`\r\n  mutation createAccount($input: CreateAccountInput!) {\r\n    createAccount(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CreateAccount = () => {\r\n  const history = useHistory();\r\n  const {\r\n    register,\r\n    getValues,\r\n    errors,\r\n    handleSubmit,\r\n  } = useForm<CreateAccountInput>({\r\n    mode: \"onChange\",\r\n  });\r\n  const onClick = () => {\r\n    const { email, password, username } = getValues();\r\n    createAccountMutation({\r\n      variables: {\r\n        input: {\r\n          email,\r\n          password,\r\n          username,\r\n        },\r\n      },\r\n    });\r\n  };\r\n  const onCompleted = (data: createAccount) => {\r\n    const {\r\n      createAccount: { ok, error },\r\n    } = data;\r\n\r\n    if (!ok && error) {\r\n      alert(error);\r\n    }\r\n\r\n    if (ok) {\r\n      alert(\"회원가입 성공! 로그인 해주세요\");\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n  const [createAccountMutation, { error }] = useMutation<\r\n    createAccount,\r\n    createAccountVariables\r\n  >(CREATE_ACCOUNT_MUTATION, {\r\n    onCompleted,\r\n  });\r\n\r\n  return (\r\n    <div className=\" min-h-screen  bg-indigo-500 flex items-center justify-center\">\r\n      <Helmet>\r\n        <title>회원가입 | front-end-practice</title>\r\n      </Helmet>\r\n      <div className=\" max-w-screen-sm w-full   px-10 pt-10  pb-5  shadow-xl bg-white rounded-md  mx-10 \">\r\n        <form\r\n          onSubmit={handleSubmit(onClick)}\r\n          className=\"flex flex-col w-full \"\r\n        >\r\n          <h2 className=\"mb-5 text-center font-semibold text-2xl text-indigo-600\">\r\n            회원가입\r\n          </h2>\r\n          <input\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"이메일은 회원가입 하는데 필수적인 요소입니다.\",\r\n              pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n            })}\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"이메일\"\r\n            required\r\n          />\r\n          {errors.email?.type === \"pattern\" && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              이메일 형식이 잘못되었습니다.\r\n            </h4>\r\n          )}\r\n          {errors.email?.type === \"required\" && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.email?.message}\r\n            </h4>\r\n          )}\r\n          <input\r\n            className=\"py-5 px-3  mb-3 w-full focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"닉네임은 회원가입 하는데 필수적인 요소입니다.\",\r\n            })}\r\n            type=\"text\"\r\n            name=\"username\"\r\n            placeholder=\"닉네임\"\r\n            required\r\n          />\r\n          {errors.username?.type === \"required\" && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.username?.message}\r\n            </h4>\r\n          )}\r\n          <input\r\n            className=\"py-5 px-3  mb-3 w-full focus:outline-none border border-black focus:border-indigo-600 transition-colors\"\r\n            ref={register({\r\n              required: \"비밀번호는 회원가입 하는데 필수적인 요소입니다.\",\r\n            })}\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"비밀번호\"\r\n            required\r\n          />\r\n          {errors.password?.type === \"required\" && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">\r\n              {errors.password?.message}\r\n            </h4>\r\n          )}\r\n          <button\r\n            className=\"py-5 px-3  w-full  mb-3 focus:outline-none border border-black hover:bg-indigo-700 hover:text-white transition-colors\"\r\n            type=\"submit\"\r\n          >\r\n            회원가입\r\n          </button>\r\n          {error && (\r\n            <h4 className=\"text-red-500 font-medium text-md my-3\">{error}</h4>\r\n          )}\r\n        </form>\r\n        <div>\r\n          <h3 className=\"text-center\">\r\n            이미 회원이신가요?{\" \"}\r\n            <Link\r\n              className=\"text-indigo-700 font-semibold hover:underline\"\r\n              to=\"/\"\r\n            >\r\n              여기\r\n            </Link>\r\n            를 눌러 로그인 하세요!\r\n          </h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\NotFound.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Home.tsx",["180"],"import { gql, useQuery, useReactiveVar } from \"@apollo/client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { ProductGridItem } from \"../components/ProductGridItem\";\r\nimport { useMe } from \"../hooks/useMe\";\r\nimport {\r\n  allProducts,\r\n  allProductsVariables,\r\n} from \"../__generated__/allProducts\";\r\nimport { PRODUCTS_FRAGMENT } from \"../fragment\";\r\nimport { Menu } from \"../components/Menu\";\r\nimport { currentHomePage } from \"../apollo\";\r\n\r\nconst ALL_PRODUCTS_QUERY = gql`\r\n  query allProducts($input: AllProductsInput!) {\r\n    allProducts(input: $input) {\r\n      ok\r\n      error\r\n      totalResults\r\n      totalPages\r\n      products {\r\n        ...productsParts\r\n      }\r\n    }\r\n  }\r\n\r\n  ${PRODUCTS_FRAGMENT}\r\n`;\r\n\r\nexport const Home = () => {\r\n  const history = useHistory();\r\n  const currentPage = useReactiveVar(currentHomePage);\r\n  const [page, setPage] = useState(currentPage);\r\n  const { data: userData, loading: userLoading } = useMe();\r\n  const {\r\n    data: productsData,\r\n    loading: productsLoading,\r\n    refetch,\r\n    error,\r\n  } = useQuery<allProducts, allProductsVariables>(ALL_PRODUCTS_QUERY, {\r\n    variables: {\r\n      input: {\r\n        page,\r\n      },\r\n    },\r\n  });\r\n  useEffect(() => {\r\n    refetch({ input: { page } });\r\n  }, []);\r\n  if (!userLoading && userData?.me.user?.isVerified === false) {\r\n    history.push(\"/not-valid-user\");\r\n  }\r\n  console.log(productsData, error);\r\n  return (\r\n    <div>\r\n      {!userLoading && userData?.me.user?.isVerified === true && (\r\n        <div>\r\n          <div className=\"max-w-screen-2xl min-h-screen mx-10 2xl:mx-auto pt-10 pb-32 grid  md:grid-cols-4 grid-rows-2 gap-5 \">\r\n            {!productsLoading &&\r\n              productsData?.allProducts.products?.map((product) => (\r\n                <Link key={product.id} to={`/product/${product.id}`}>\r\n                  <ProductGridItem\r\n                    name={product.name}\r\n                    price={product.price}\r\n                    bigImg={product.bigImg}\r\n                    savedAmount={product.savedAmount}\r\n                  />\r\n                </Link>\r\n              ))}\r\n          </div>\r\n          <Menu\r\n            totalPages={productsData?.allProducts.totalPages}\r\n            totalProducts={productsData?.allProducts.totalResults}\r\n            page={page}\r\n            setPage={setPage}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\ValidateCode.tsx",["181"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport {\r\n  confirmVerificationCode,\r\n  confirmVerificationCodeVariables,\r\n} from \"../__generated__/confirmVerificationCode\";\r\n\r\nconst CONFIRM_VALIDATION_CODE_MUTATION = gql`\r\n  mutation confirmVerificationCode($input: ConfirmVerificationCodeInput!) {\r\n    confirmVerificationCode(input: $input) {\r\n      ok\r\n      error\r\n      userId\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ValidationCode = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const client = useApolloClient();\r\n  const code = location.search.split(\"?code=\")[1];\r\n  const onCompleted = (data: confirmVerificationCode) => {\r\n    const {\r\n      confirmVerificationCode: { ok, userId },\r\n    } = data;\r\n    if (ok && userId) {\r\n      client.writeFragment({\r\n        id: `User:${userId}`,\r\n        fragment: gql`\r\n          fragment UserVerifCodeFragment on User {\r\n            isVerified\r\n          }\r\n        `,\r\n        data: {\r\n          isVerified: true,\r\n        },\r\n      });\r\n      alert(\"성공적으로 인증 되었습니다.\");\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n  const [confirmVerificationCodeMutation, { loading, data }] = useMutation<\r\n    confirmVerificationCode,\r\n    confirmVerificationCodeVariables\r\n  >(CONFIRM_VALIDATION_CODE_MUTATION, { onCompleted });\r\n  useEffect(() => {\r\n    confirmVerificationCodeMutation({\r\n      variables: {\r\n        input: {\r\n          code,\r\n        },\r\n      },\r\n    });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <div className=\"min-h-screen flex flex-col justify-center items-center bg-indigo-500\">\r\n        {loading && (\r\n          <h1 className=\"text-white font-semibold text-2xl\">Loading...</h1>\r\n        )}\r\n        {!loading && data?.confirmVerificationCode.error && (\r\n          <div className=\"px-5 py-10 flex flex-col justify-center items-center border mx-3 bg-white rounded-xl\">\r\n            <h1 className=\"text-black font-semibold text-2xl\">\r\n              {data?.confirmVerificationCode.error}\r\n            </h1>\r\n            <Link className=\"text-black mt-10 hover:underline\" to=\"/\">\r\n              홈으로 가기\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\hooks\\useMe.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\ProductGridItem.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\utils.ts",["182","183"],"import { useHistory } from \"react-router-dom\";\r\nimport { useMe } from \"./hooks/useMe\";\r\n\r\nconst colors = [\r\n  \"blugGray\",\r\n  \"coolGray\",\r\n  \"trueGray\",\r\n  \"warmGray\",\r\n  \"orange\",\r\n  \"amber\",\r\n  \"lime\",\r\n  \"emerald\",\r\n  \"teal\",\r\n  \"cyan\",\r\n  \"lightBlue\",\r\n  \"violet\",\r\n  \"fuchsia\",\r\n  \"rose\",\r\n];\r\n\r\nexport const pickRandomBgColor = (): string => {\r\n  const index = Math.floor(Math.random() * colors.length);\r\n  return colors[index];\r\n};\r\n\r\nexport const getDate = (dateNumber: number): string => {\r\n  const dateObj = new Date(dateNumber);\r\n  const dateYear = dateObj.getFullYear();\r\n  const dateMonth = dateObj.getMonth() + 1;\r\n  const dateDate = dateObj.getDate();\r\n  return `${dateYear}년 ${dateMonth}월 ${dateDate}일`;\r\n};\r\n\r\nexport const getNameSuppressed = (name: string): string => {\r\n  let newName = name;\r\n  if (name.length > 10) {\r\n    newName = `${name.substr(0, 10)}...`;\r\n  }\r\n  return newName;\r\n};\r\n\r\nexport const numberWithCommas = (price: number) => {\r\n  return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n};\r\n\r\nexport {};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\Menu.tsx",["184","185","186","187","188","189"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faHome,\r\n  faUser,\r\n  faArrowCircleRight,\r\n  faArrowCircleLeft,\r\n  faCommentDots,\r\n  faPlusCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport \"../styles/animation.css\";\r\nimport { currentHomePage } from \"../apollo\";\r\nimport { NewMsg } from \"./newMsg\";\r\n\r\ninterface IHomeMenuProps {\r\n  totalPages?: number | null;\r\n  totalProducts?: number | null;\r\n  page?: number | null;\r\n  setPage?: React.Dispatch<React.SetStateAction<number>> | null;\r\n}\r\n\r\nexport const Menu: React.FC<IHomeMenuProps> = ({\r\n  totalPages,\r\n  totalProducts,\r\n  page,\r\n  setPage,\r\n}) => {\r\n  const [mode, setMode] = useState<string>(\"\");\r\n  const location = useLocation();\r\n  const menuDiv = useRef<HTMLDivElement>(null);\r\n  const [menuOpen, setMenuOpen] = useState(false);\r\n  const triggerMenu = () => {\r\n    if (menuOpen) {\r\n      //  close It!\r\n      if (menuDiv.current) {\r\n        menuDiv.current.id = \"menuSmall\";\r\n        menuDiv.current.style.pointerEvents = \"none\";\r\n        setTimeout(() => {\r\n          if (menuDiv.current) {\r\n            menuDiv.current.style.pointerEvents = \"inherit\";\r\n          }\r\n        }, 1000);\r\n        setMenuOpen((prev) => !prev);\r\n      }\r\n    } else {\r\n      //  Open it!\r\n      if (menuDiv.current) {\r\n        menuDiv.current.id = \"menuBig\";\r\n        menuDiv.current.style.pointerEvents = \"none\";\r\n        setTimeout(() => {\r\n          if (menuDiv.current) {\r\n            menuDiv.current.style.pointerEvents = \"inherit\";\r\n          }\r\n        }, 1000);\r\n        setTimeout(() => {\r\n          setMenuOpen((prev) => !prev);\r\n        }, 500);\r\n      }\r\n    }\r\n  };\r\n  const onClickMovePage = (e: any) => {\r\n    if (totalPages && totalProducts && page && setPage) {\r\n      let target = e.target;\r\n      if (e.target.tagName === \"path\") {\r\n        target = e.target.parentNode;\r\n      }\r\n      const targetIconAhead = target.getAttribute(\"data-icon\").split(\"-\")[2];\r\n      if (targetIconAhead === \"right\") {\r\n        if (page < totalPages) {\r\n          setPage((prev) => prev + 1);\r\n          currentHomePage(page + 1);\r\n        }\r\n      }\r\n      if (targetIconAhead === \"left\") {\r\n        if (page > 1) {\r\n          setPage((prev) => prev - 1);\r\n          currentHomePage(page - 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const path = location.pathname;\r\n    if (path === \"/\") {\r\n      setMode(\"home\");\r\n    }\r\n    if (path === \"/me\") {\r\n      setMode(\"me\");\r\n    }\r\n    if (path === \"/messages\") {\r\n      setMode(\"messages\");\r\n    }\r\n    triggerMenu();\r\n  }, [location]);\r\n  return (\r\n    <div className=\" flex justify-center items-center max-w-screen-md  mx-10 md:mx-auto fixed bottom-0 left-0 right-0  \">\r\n      <div\r\n        ref={menuDiv}\r\n        className=\"md:px-12 px-10 py-5 my-5   flex items-center justify-around  shadow-2xl bg-amber-300  rounded-full  \"\r\n      >\r\n        {mode === \"home\" && (\r\n          <>\r\n            {menuOpen && (\r\n              <Link to=\"/messages\">\r\n                <NewMsg\r\n                  style={\r\n                    \"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n                  }\r\n                />\r\n              </Link>\r\n            )}\r\n            {menuOpen && (\r\n              <FontAwesomeIcon\r\n                onClick={onClickMovePage}\r\n                icon={faArrowCircleLeft}\r\n                className=\"text-3xl text-indigo-400 cursor-pointer md:text-4xl slowToShow\"\r\n              />\r\n            )}\r\n            {!menuOpen && (\r\n              <FontAwesomeIcon\r\n                onClick={triggerMenu}\r\n                icon={faHome}\r\n                className=\"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n              />\r\n            )}\r\n            {menuOpen && (\r\n              <h1\r\n                onClick={triggerMenu}\r\n                className=\"text-3xl text-indigo-400 cursor-pointer md:text-4xl slowToShow  \"\r\n              >\r\n                {page}\r\n              </h1>\r\n            )}\r\n            {menuOpen && (\r\n              <FontAwesomeIcon\r\n                onClick={onClickMovePage}\r\n                icon={faArrowCircleRight}\r\n                className=\"text-3xl text-indigo-400 cursor-pointer md:text-4xl slowToShow\"\r\n              />\r\n            )}\r\n            {menuOpen && (\r\n              <Link to={`/me`}>\r\n                <FontAwesomeIcon\r\n                  icon={faUser}\r\n                  className=\"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n                />\r\n              </Link>\r\n            )}\r\n          </>\r\n        )}\r\n        {mode === \"me\" && (\r\n          <>\r\n            {menuOpen && (\r\n              <Link to=\"/messages\">\r\n                <NewMsg\r\n                  style={\r\n                    \"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n                  }\r\n                />\r\n              </Link>\r\n            )}\r\n            {menuOpen && (\r\n              <FontAwesomeIcon\r\n                icon={faUser}\r\n                onClick={triggerMenu}\r\n                className=\"text-3xl text-indigo-400 cursor-pointer md:text-4xl slowToShow\"\r\n              />\r\n            )}\r\n            {!menuOpen && (\r\n              <FontAwesomeIcon\r\n                icon={faUser}\r\n                onClick={triggerMenu}\r\n                className=\"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n              />\r\n            )}\r\n            {menuOpen && (\r\n              <Link to=\"/\">\r\n                <FontAwesomeIcon\r\n                  icon={faHome}\r\n                  className=\"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n                />\r\n              </Link>\r\n            )}\r\n          </>\r\n        )}\r\n        {mode === \"messages\" && (\r\n          <>\r\n            {menuOpen && (\r\n              <Link to=\"/\">\r\n                <FontAwesomeIcon\r\n                  icon={faHome}\r\n                  className=\"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n                />\r\n              </Link>\r\n            )}\r\n            {menuOpen && (\r\n              <NewMsg\r\n                onClick={triggerMenu}\r\n                style={\r\n                  \"text-3xl text-indigo-400 cursor-pointer md:text-4xl slowToShow\"\r\n                }\r\n              />\r\n            )}\r\n            {!menuOpen && (\r\n              <NewMsg\r\n                onClick={triggerMenu}\r\n                style={\r\n                  \"text-3xl text-gray-100 cursor-pointer md:text-4xl slowToShow\"\r\n                }\r\n              />\r\n            )}\r\n            {menuOpen && (\r\n              <Link to=\"/me\">\r\n                <FontAwesomeIcon\r\n                  icon={faUser}\r\n                  className=\"text-3xl text-indigo-100 cursor-pointer md:text-4xl slowToShow\"\r\n                />\r\n              </Link>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n      {mode === \"home\" && (\r\n        <div className=\"fixed bottom-0 right-0\">\r\n          <Link to=\"/product/new\">\r\n            <FontAwesomeIcon\r\n              icon={faPlusCircle}\r\n              className=\"mr-2 md:mr-5 mb-7 2xl:mr-10 text-5xl text-indigo-800 transform hover:scale-125 transition-transform\"\r\n            />\r\n          </Link>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\fragment.ts",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Me.tsx",["190","191","192","193"],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Messages.tsx",["194","195"],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\UserProfile.tsx",["196","197"],"import { gql, useQuery, useReactiveVar } from \"@apollo/client\";\r\nimport {\r\n  faAt,\r\n  faUserCircle,\r\n  faUserTimes,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { currentUserProfileMenu } from \"../apollo\";\r\nimport { AvatarFullsize } from \"../components/avatarFullsize\";\r\nimport { BackButton } from \"../components/BackButton\";\r\nimport { LoadingSpinner } from \"../components/LoadingSpinner\";\r\nimport { SellingHistory } from \"../components/SellingHistory\";\r\nimport { useMe } from \"../hooks/useMe\";\r\nimport {\r\n  findUserById,\r\n  findUserByIdVariables,\r\n} from \"../__generated__/findUserById\";\r\n\r\ninterface IParams {\r\n  id: string;\r\n}\r\n\r\nconst FIND_USER_BY_ID_QUERY = gql`\r\n  query findUserById($input: FindUserByIdInput!) {\r\n    findUserById(input: $input) {\r\n      ok\r\n      error\r\n      user {\r\n        id\r\n        email\r\n        isVerified\r\n        username\r\n        avatarImg\r\n        sellingProducts {\r\n          id\r\n          name\r\n          bigImg\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport enum UserProfileMenus {\r\n  UsernameMenu = \"UsernameMenu\",\r\n  SellingHistoryMenu = \"SellingHistoryMenu\",\r\n}\r\n\r\nexport const UserProfile = () => {\r\n  const history = useHistory();\r\n  const { id } = useParams<IParams>();\r\n  const { loading: userLoading, data: userData } = useMe();\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n  const currentMenu = useReactiveVar(currentUserProfileMenu);\r\n  const [selected, setSelected] = useState<string>(currentMenu);\r\n  const [fullsizeMode, setFullsizeMode] = useState(false);\r\n  const { data, error } = useQuery<findUserById, findUserByIdVariables>(\r\n    FIND_USER_BY_ID_QUERY,\r\n    { variables: { input: { userId: +id } }, fetchPolicy: \"network-only\" }\r\n  );\r\n\r\n  const onClickMenu = (e: any) => {\r\n    let targetMenu = e.target;\r\n    if (targetMenu.tagName === \"H2\") {\r\n      targetMenu = targetMenu.parentNode;\r\n    }\r\n    if (targetMenu.id) {\r\n      if (selected) {\r\n        if (selected === targetMenu.id) {\r\n          return;\r\n        }\r\n        const selectedMenu = document.getElementById(selected);\r\n        selectedMenu?.classList.remove(\"bg-indigo-500\", \"text-amber-300\");\r\n      }\r\n\r\n      if (targetMenu.id === UserProfileMenus.SellingHistoryMenu) {\r\n        setSelected(UserProfileMenus.SellingHistoryMenu);\r\n        currentUserProfileMenu(UserProfileMenus.SellingHistoryMenu);\r\n      }\r\n      if (targetMenu.id === UserProfileMenus.UsernameMenu) {\r\n        setSelected(UserProfileMenus.UsernameMenu);\r\n        currentUserProfileMenu(UserProfileMenus.UsernameMenu);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onClickToFullsize = () => {\r\n    setFullsizeMode(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const selectedMenu = document.getElementById(selected);\r\n    if (selectedMenu) {\r\n      selectedMenu.classList.add(\"bg-indigo-500\", \"text-amber-300\");\r\n    }\r\n  }, [data, selected]);\r\n\r\n  useEffect(() => {\r\n    if (userData?.me.user && data?.findUserById.user) {\r\n      if (userData?.me.user.id === data?.findUserById.user.id) {\r\n        history.push(\"/me\");\r\n      }\r\n    }\r\n  }, [userData, data]);\r\n\r\n  useEffect(() => {\r\n    if (userData?.me.user?.isVerified === false) {\r\n      history.push(\"/not-valid-user\");\r\n    }\r\n  }, [userData]);\r\n\r\n  if (userLoading) {\r\n    <LoadingSpinner />;\r\n  }\r\n\r\n  if (data) {\r\n    if (!data.findUserById.ok) {\r\n      history.goBack();\r\n    }\r\n  }\r\n\r\n  if (error) {\r\n    console.log(error);\r\n    history.goBack();\r\n  }\r\n\r\n  console.log(menuRef);\r\n\r\n  return (\r\n    <div>\r\n      <BackButton />\r\n      {data?.findUserById.user && (\r\n        <div>\r\n          {data.findUserById.user.avatarImg && fullsizeMode === true && (\r\n            <AvatarFullsize\r\n              avatarUrl={data.findUserById.user.avatarImg}\r\n              fullsizeMode={fullsizeMode}\r\n              setFullsizeMode={setFullsizeMode}\r\n            />\r\n          )}\r\n          <div className=\"max-w-screen-2xl  min-h-screen  mx-12 2xl:mx-auto shadow-2xl\">\r\n            <header className=\"flex w-full items-center justify-between shadow-2xl bg-amber-300\">\r\n              <div\r\n                id={UserProfileMenus.UsernameMenu}\r\n                onClick={onClickMenu}\r\n                className=\"w-full py-5 cursor-pointer overflow-hidden \"\r\n              >\r\n                <h2 className=\"text-xs md:text-xl text-center font-semibold uppercase\">\r\n                  {data.findUserById.user.username}\r\n                </h2>\r\n              </div>\r\n              <div\r\n                id={UserProfileMenus.SellingHistoryMenu}\r\n                onClick={onClickMenu}\r\n                className=\"w-full py-5 cursor-pointer  \"\r\n              >\r\n                <h2 className=\"text-xs md:text-xl text-center font-semibold\">\r\n                  판매 내역\r\n                </h2>\r\n              </div>\r\n            </header>\r\n            <main className=\"p-5\">\r\n              {selected === UserProfileMenus.UsernameMenu && (\r\n                <>\r\n                  <div className=\"grid grid-rows-2 md:grid-cols-2 md:grid-rows-1 w-full transition-shadow duration-500   \">\r\n                    {data.findUserById.user.avatarImg ? (\r\n                      <div className=\"overflow-hidden\">\r\n                        <div\r\n                          onClick={onClickToFullsize}\r\n                          className=\"w-full py-32 md:h-96 md:py-0 bg-cover bg-center transform hover:scale-125 duration-500 \"\r\n                          style={{\r\n                            backgroundImage: `url(${data.findUserById.user.avatarImg})`,\r\n                          }}\r\n                        ></div>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"w-full py-20 md:py-32 flex items-center justify-center bg-indigo-800\">\r\n                        <FontAwesomeIcon\r\n                          icon={faUserTimes}\r\n                          className=\"md:text-9xl text-6xl text-indigo-500\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n                    <article className=\"w-full h-2/3 md:h-full grid grid-cols-2 grid-rows-1 bg-gray-200\">\r\n                      <section className=\"py-10 md:py-0 w-full h-full md:text-base lg:text-xl 2xl:text-2xl text-xs font-semibold text-indigo-600  border-r-2 border-dotted border-indigo-600  flex justify-center items-center relative\">\r\n                        <span className=\"z-10 text-black\">\r\n                          {data.findUserById.user.email}\r\n                        </span>\r\n                        <FontAwesomeIcon\r\n                          icon={faAt}\r\n                          className=\"md:text-9xl text-6xl absolute mx-auto text-center opacity-40\"\r\n                        />\r\n                      </section>\r\n                      <section className=\"py-10 md:py-0 w-full h-full md:text-base lg:text-xl 2xl:text-2xl text-xs font-semibold text-indigo-600 flex justify-center items-center relative\">\r\n                        <span className=\"z-10 text-black\">\r\n                          {data.findUserById.user.username}\r\n                        </span>\r\n                        <FontAwesomeIcon\r\n                          icon={faUserCircle}\r\n                          className=\"md:text-9xl text-6xl absolute mx-auto text-center opacity-40\"\r\n                        />\r\n                      </section>\r\n                    </article>\r\n                  </div>\r\n                </>\r\n              )}\r\n              {selected === UserProfileMenus.SellingHistoryMenu && (\r\n                <div className=\"p-5 grid md:grid-cols-3 gap-5\">\r\n                  {data.findUserById.user.sellingProducts &&\r\n                    data.findUserById.user.sellingProducts.map(\r\n                      (eachHistory) => (\r\n                        <SellingHistory\r\n                          id={eachHistory.id}\r\n                          key={eachHistory.id}\r\n                          bigImg={eachHistory.bigImg}\r\n                          name={eachHistory.name}\r\n                        />\r\n                      )\r\n                    )}\r\n                </div>\r\n              )}\r\n            </main>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\NotValidUser.tsx",["198"],"import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { isLoggedIn } from \"../apollo\";\r\nimport { ConfirmVerificationCodeInput } from \"../__generated__/globalTypes\";\r\n\r\nexport const NotValidUser = () => {\r\n  const history = useHistory();\r\n  const {\r\n    register,\r\n    getValues,\r\n    handleSubmit,\r\n    errors,\r\n  } = useForm<ConfirmVerificationCodeInput>({ mode: \"onChange\" });\r\n  const onClickValidation = () => {\r\n    const { code } = getValues();\r\n    history.push(`/validate-code?code=${code}`);\r\n  };\r\n  const onClickToResetToken = () => {\r\n    localStorage.removeItem(\"token\");\r\n    history.push(\"/\");\r\n    window.location.reload();\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"min-h-screen flex justify-center items-center bg-indigo-500\">\r\n        <div className=\"max-w-screen-sm w-full mx-10 bg-white shadow-xl rounded-md py-12 px-10 sm:mx-0\">\r\n          <h1 className=\"text-center font-semibold text-2xl\">\r\n            받으신 코드를 입력하고, 서비스를 계속 이용해주세요.\r\n          </h1>\r\n          <form\r\n            onSubmit={handleSubmit(onClickValidation)}\r\n            className=\"w-full mt-5 flex flex-col items-end\"\r\n          >\r\n            <input\r\n              ref={register({\r\n                required: \"코드를 입력해 주세요\",\r\n              })}\r\n              className=\"w-full py-5 px-3 border focus:outline-none focus:border-indigo-600 transition-colors\"\r\n              type=\"text\"\r\n              name=\"code\"\r\n              placeholder=\"코드\"\r\n              required\r\n            />\r\n            {errors.code?.message && (\r\n              <h2 className=\"text-red-500 font-medium text-md my-3\">\r\n                {errors.code?.message}\r\n              </h2>\r\n            )}\r\n            <div className=\"mt-10 grid grid-cols-2 w-full\">\r\n              <Link\r\n                onClick={onClickToResetToken}\r\n                className=\" text-base hover:bg-indigo-500  hover:text-white  border transition-colors flex justify-center items-center p-3\"\r\n                to=\"/\"\r\n              >\r\n                로그인 페이지로 돌아가기\r\n              </Link>\r\n              <button className=\" border  font-medium text-md hover:bg-teal-600 hover:text-white transition-colors flex justify-center items-center p-3 focus:outline-none\">\r\n                확인\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\WalletHistory.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\Product.tsx",["199","200"],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\LoadingSpinner.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\CreateProduct.tsx",["201","202","203","204","205"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useMe } from \"../hooks/useMe\";\r\nimport { allCategories } from \"../__generated__/allCategories\";\r\nimport {\r\n  createProduct,\r\n  createProductVariables,\r\n} from \"../__generated__/createProduct\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faArrowLeft,\r\n  faPlus,\r\n  faArrowRight,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport axios from \"axios\";\r\nimport { PointPercent } from \"../__generated__/globalTypes\";\r\nimport { FormError } from \"../components/FormError\";\r\nimport { numberWithCommas } from \"../utils\";\r\nimport { FormButton } from \"../components/FormButton\";\r\nimport { BackButton } from \"../components/BackButton\";\r\nimport { ImgGrid } from \"../components/ImgGrid\";\r\n\r\nconst CREATE_PRODUCT_MUTATION = gql`\r\n  mutation createProduct($input: CreateProductInput!) {\r\n    createProduct(input: $input) {\r\n      ok\r\n      error\r\n      productId\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ALL_CATEGORIES_QUERY = gql`\r\n  query allCategories {\r\n    allCategories {\r\n      ok\r\n      error\r\n      categories {\r\n        slug\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IFormProps {\r\n  productName: string;\r\n  productPrice: string;\r\n  category: string;\r\n  pointPercentKor: string;\r\n}\r\n\r\nexport const CreateProduct = () => {\r\n  const descriptionDivRef = useRef<HTMLDivElement>(null);\r\n  const [formCalled, setFormCalled] = useState(false);\r\n  const [previewImage, setPreviewImage] = useState<string[]>([]);\r\n  const [currentPrice, setCurrentPrice] = useState(0);\r\n  const [currentPreview, setCurrentPreview] = useState(0);\r\n  const [exitImgGrid, setExitImgGrid] = useState(true);\r\n  const { data: userData, loading: userLoading } = useMe();\r\n  const { data: categoriesData } = useQuery<allCategories>(\r\n    ALL_CATEGORIES_QUERY\r\n  );\r\n  const onCompleted = (data: createProduct) => {\r\n    const {\r\n      createProduct: { ok, error, productId },\r\n    } = data;\r\n    if (ok) {\r\n      alert(\"상품 가격의 일원 단위는 지워집니다.\");\r\n      alert(\"프로덕트가 성공적으로 create 되었습니다.\");\r\n      history.push(`/product/${productId}`);\r\n    } else {\r\n      alert(\"에러 발생!\");\r\n      console.log(error);\r\n    }\r\n  };\r\n  const [createProductMutation, { called }] = useMutation<\r\n    createProduct,\r\n    createProductVariables\r\n  >(CREATE_PRODUCT_MUTATION, { onCompleted });\r\n  const history = useHistory();\r\n  const {\r\n    register,\r\n    getValues,\r\n    handleSubmit,\r\n    watch,\r\n    errors,\r\n    formState,\r\n    setValue,\r\n  } = useForm<IFormProps>({\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  const onClickPreviewImageLeft = () => {\r\n    if (currentPreview === 0) {\r\n      setCurrentPreview(previewImage.length - 1);\r\n    }\r\n    if (currentPreview >= 1) {\r\n      setCurrentPreview((prev) => prev - 1);\r\n    }\r\n  };\r\n  const onClickPreviewImageRight = () => {\r\n    if (currentPreview === previewImage.length - 1) {\r\n      setCurrentPreview(0);\r\n    }\r\n    if (currentPreview < previewImage.length - 1) {\r\n      setCurrentPreview((prev) => prev + 1);\r\n    }\r\n  };\r\n  const parsePointPercentKorToEnum = (value: string): PointPercent => {\r\n    if (value === \"가격의 100%\") {\r\n      return PointPercent.full;\r\n    }\r\n    if (value === \"가격의 50%\") {\r\n      return PointPercent.half;\r\n    }\r\n    if (value === \"가격의 1%\") {\r\n      return PointPercent.one;\r\n    }\r\n    if (value === \"가격의 10%\") {\r\n      return PointPercent.ten;\r\n    }\r\n    if (value === \"가격의 0.1%\") {\r\n      return PointPercent.zeroDotOne;\r\n    }\r\n    return PointPercent.zeroDotOne;\r\n  };\r\n  const onSubmit = async () => {\r\n    setFormCalled(true);\r\n    const { category, productName, pointPercentKor } = getValues();\r\n    const description = descriptionDivRef.current?.innerHTML;\r\n    const pointPercent = parsePointPercentKorToEnum(pointPercentKor);\r\n    const price = Math.floor(currentPrice / 10) * 10;\r\n    let bigImg: string | null = null;\r\n    let detailImgs: string[] | null = null;\r\n\r\n    console.log(\"onSubmit\", previewImage);\r\n\r\n    if (previewImage && previewImage.length !== 0) {\r\n      const formImgData = new FormData();\r\n      for (const eachPreviewImg of previewImage) {\r\n        const response = await fetch(eachPreviewImg);\r\n        const blob = await response.blob();\r\n        formImgData.append(\"uploads\", blob);\r\n      }\r\n      const {\r\n        data,\r\n      }: { data: { uploaded: boolean; url: string }[] } = await axios({\r\n        method: \"POST\",\r\n        url: \"http://localhost:4000/uploads\",\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n        data: formImgData,\r\n      });\r\n      if (data && data.length !== 0) {\r\n        bigImg = data[0].uploaded ? data[0].url : \"\";\r\n        detailImgs = data.map((eachData) =>\r\n          eachData.uploaded ? eachData.url : \"\"\r\n        );\r\n      }\r\n    }\r\n    await createProductMutation({\r\n      variables: {\r\n        input: {\r\n          categorySlug: category,\r\n          name: productName,\r\n          price,\r\n          ...(description && { description }),\r\n          ...(bigImg && { bigImg }),\r\n          ...(detailImgs && { detailImgs }),\r\n          pointPercent,\r\n        },\r\n      },\r\n    });\r\n    setFormCalled(false);\r\n  };\r\n\r\n  const generatePointPercentOption = (value: PointPercent) => {\r\n    if (value === PointPercent.full) {\r\n      return \"가격의 100%\";\r\n    }\r\n    if (value === PointPercent.half) {\r\n      return \"가격의 50%\";\r\n    }\r\n    if (value === PointPercent.one) {\r\n      return \"가격의 1%\";\r\n    }\r\n    if (value === PointPercent.ten) {\r\n      return \"가격의 10%\";\r\n    }\r\n    if (value === PointPercent.zeroDotOne) {\r\n      return \"가격의 0.1%\";\r\n    }\r\n  };\r\n\r\n  const validatePrice = () => {\r\n    let value = watch(\"productPrice\");\r\n    if (value.includes(\",\")) {\r\n      value = value.replaceAll(\",\", \"\");\r\n    }\r\n    let number = Number.parseInt(value);\r\n    if (isNaN(number)) {\r\n      setValue(\"productPrice\", value.substr(0, value.length - 1));\r\n    } else {\r\n      setValue(\"productPrice\", numberWithCommas(number));\r\n      setCurrentPrice(number);\r\n    }\r\n  };\r\n\r\n  const onClickToSetImgGrid = () => {\r\n    setExitImgGrid(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!userLoading && userData?.me.user?.isVerified === false) {\r\n      history.push(\"/not-valid-user\");\r\n    }\r\n  }, []);\r\n\r\n  console.log(errors);\r\n\r\n  return (\r\n    <div>\r\n      {!exitImgGrid && (\r\n        <ImgGrid\r\n          useFor=\"CREATE\"\r\n          originalImgs={previewImage}\r\n          setOriginalImgs={setPreviewImage}\r\n          exitImgGrid={exitImgGrid}\r\n          setExitImgGrid={setExitImgGrid}\r\n        />\r\n      )}\r\n      {exitImgGrid && <BackButton />}\r\n      <div\r\n        className={`max-w-screen-2xl min-h-screen mx-12 2xl:mx-auto shadow-2xl ${\r\n          exitImgGrid ? \"block\" : \"hidden\"\r\n        }`}\r\n      >\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div className=\"flex\">\r\n            {previewImage && previewImage.length !== 0 && (\r\n              <div\r\n                onClick={onClickPreviewImageLeft}\r\n                className=\"px-3 md:px-5 cursor-pointer  flex items-center justify-center bg-indigo-900 \"\r\n              >\r\n                <FontAwesomeIcon\r\n                  icon={faArrowLeft}\r\n                  className=\"text-2xl md:text-4xl text-indigo-300  \"\r\n                />\r\n              </div>\r\n            )}\r\n            <div\r\n              onClick={onClickToSetImgGrid}\r\n              className=\" h-64 md:h-96 bg-indigo-800 w-full flex justify-center items-center cursor-pointer\"\r\n            >\r\n              {previewImage && previewImage.length === 0 && (\r\n                <FontAwesomeIcon\r\n                  icon={faPlus}\r\n                  className=\"text-5xl text-indigo-500\"\r\n                />\r\n              )}\r\n              {previewImage && previewImage.length !== 0 && (\r\n                <img src={previewImage[0]} className=\"max-w-full max-h-full\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-5 grid-rows-4 md:grid-rows-2 bg-indigo-600 \">\r\n            <div className=\"col-start-1 col-span-5 md:col-start-1 md:col-span-3\">\r\n              <input\r\n                ref={register({\r\n                  required: \"이름은 필수적인 요소입니다.\",\r\n                })}\r\n                type=\"text\"\r\n                required\r\n                name=\"productName\"\r\n                placeholder=\"상품 이름 \"\r\n                className=\"w-full py-8 md:py-10 px-5 text-base md:text-xl focus:outline-none bg-indigo-600 text-white  \"\r\n              />\r\n              {errors.productName?.message && (\r\n                <FormError errorMsg={errors.productName?.message} />\r\n              )}\r\n              {errors.productName?.type === \"maxLength\" && (\r\n                <FormError errorMsg={\"최대 길이는 20자입니다.\"} />\r\n              )}\r\n            </div>\r\n            <div className=\" bg-indigo-600 row-start-2 row-span-1 col-start-1 col-span-5 md:col-start-1 md:col-span-3 md:row-start-2 md:row-span-1\">\r\n              <div className=\"flex items-center border-t border-indigo-500\">\r\n                <input\r\n                  ref={register({\r\n                    minLength: {\r\n                      message: \"상품 금액은 최소 10원부터입니다.\",\r\n                      value: 2,\r\n                    },\r\n                    maxLength: {\r\n                      message: \"상품 금액이 1억을 넘어갈 순 없습니다.\",\r\n                      value: 10,\r\n                    },\r\n                    required: \"가격은 필수적인 요소입니다.\",\r\n                  })}\r\n                  onChange={validatePrice}\r\n                  type=\"text\"\r\n                  required\r\n                  name=\"productPrice\"\r\n                  maxLength={10}\r\n                  minLength={2}\r\n                  placeholder=\"상품 가격\"\r\n                  className=\"w-full py-8 md:py-10 px-5 text-base md:text-xl focus:outline-none  bg-indigo-600 text-white  \"\r\n                />\r\n                <span className=\" text-sm md:text-xl text-amber-300 pr-5\">\r\n                  원\r\n                </span>\r\n              </div>\r\n              {errors.productPrice?.message && (\r\n                <FormError errorMsg={errors.productPrice?.message} />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"col-span-full row-start-3 row-span-1 md:col-start-4 md:col-span-2 md:row-start-1 md:row-span-1\">\r\n              <select\r\n                ref={register}\r\n                name=\"category\"\r\n                className=\"bg-indigo-400 text-xs md:text-xl font-semibold text-amber-300 focus:outline-none w-full h-full \"\r\n              >\r\n                {categoriesData?.allCategories.categories &&\r\n                  categoriesData?.allCategories.categories.map(\r\n                    (category, index) => (\r\n                      <option key={index} className=\"text-white \">\r\n                        {category.slug}\r\n                      </option>\r\n                    )\r\n                  )}\r\n              </select>\r\n            </div>\r\n            <div className=\"col-span-full row-start-4 row-span-1 md:col-start-4 md:col-span-2 md:row-start-2 md:row-span-1\">\r\n              <select\r\n                ref={register}\r\n                name=\"pointPercentKor\"\r\n                className=\"bg-indigo-500 focus:outline-none text-xs md:text-xl font-semibold text-amber-300 w-full h-full\"\r\n              >\r\n                {Object.values(PointPercent).map((value, index) => (\r\n                  <option key={index} className=\"text-amber-300\">\r\n                    {generatePointPercentOption(value)}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\" py-12 px-10 bg-indigo-800\">\r\n            <div\r\n              ref={descriptionDivRef}\r\n              className=\"w-full rounded-lg px-5 py-5 focus:outline-none bg-indigo-100 text-black text-sm md:text-xl\"\r\n              contentEditable={true}\r\n              style={{ minHeight: \"500px\" }}\r\n            />\r\n          </div>\r\n          <div className=\"pb-10 pt-3 flex justify-end items-center\">\r\n            <FormButton\r\n              btnText={\"제출\"}\r\n              isValid={formState.isValid}\r\n              loading={formCalled}\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\FullSizeImgBoard.tsx",["206"],"import { useEffect, useRef, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faChevronRight,\r\n  faChevronLeft,\r\n  faTimes,\r\n  faCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface IProps {\r\n  detailImgs: { source: string }[];\r\n  fullSizeMode: boolean;\r\n  setFullSizeMode: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nexport const FullSizeImgBoard: React.FC<IProps> = ({\r\n  detailImgs,\r\n  fullSizeMode,\r\n  setFullSizeMode,\r\n}) => {\r\n  const [imgIndex, setImgIndex] = useState<number>(0);\r\n\r\n  const onClickToExit = () => {\r\n    setFullSizeMode(false);\r\n  };\r\n\r\n  const onClickToLeft = () => {\r\n    let _index = imgIndex;\r\n    const prevImgPagination = document.getElementById(`imgPagination${_index}`);\r\n    let nextImgPagination: HTMLElement | null;\r\n\r\n    if (detailImgs) {\r\n      if (imgIndex === 0) {\r\n        setImgIndex(detailImgs.length - 1);\r\n        _index = detailImgs.length - 1;\r\n      } else {\r\n        setImgIndex((prev) => prev - 1);\r\n        _index -= 1;\r\n      }\r\n    }\r\n\r\n    nextImgPagination = document.getElementById(`imgPagination${_index}`);\r\n\r\n    if (prevImgPagination) {\r\n      prevImgPagination.style.color = \"black\";\r\n    }\r\n\r\n    if (nextImgPagination) {\r\n      nextImgPagination.style.color = \"rgba(252, 211, 77, 1)\";\r\n    }\r\n  };\r\n\r\n  const onClickToRight = () => {\r\n    let _index = imgIndex;\r\n    const prevImgPagination = document.getElementById(`imgPagination${_index}`);\r\n    let nextImgPagination: HTMLElement | null;\r\n\r\n    if (imgIndex === detailImgs.length - 1) {\r\n      _index = 0;\r\n      setImgIndex(0);\r\n    } else {\r\n      setImgIndex((prev) => prev + 1);\r\n      _index += 1;\r\n    }\r\n\r\n    nextImgPagination = document.getElementById(`imgPagination${_index}`);\r\n\r\n    if (prevImgPagination) {\r\n      prevImgPagination.style.color = \"black\";\r\n    }\r\n\r\n    if (nextImgPagination) {\r\n      nextImgPagination.style.color = \"rgba(252, 211, 77, 1)\";\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fullSizeImgBoard = document.getElementById(\"fullSizeImgBoard\");\r\n    if (fullSizeImgBoard) {\r\n      if (fullSizeMode) {\r\n        fullSizeImgBoard.style.visibility = \"visible\";\r\n        fullSizeImgBoard.style.opacity = \"1\";\r\n        fullSizeImgBoard.style.zIndex = \"50\";\r\n      } else {\r\n        fullSizeImgBoard.style.visibility = \"hidden\";\r\n        fullSizeImgBoard.style.opacity = \"0\";\r\n        fullSizeImgBoard.style.zIndex = \"0\";\r\n      }\r\n    }\r\n  }, [fullSizeMode]);\r\n\r\n  useEffect(() => {\r\n    const imgPagination = document.getElementById(`imgPagination0`);\r\n    if (imgPagination) {\r\n      imgPagination.style.color = \"rgba(252, 211, 77, 1)\";\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      id=\"fullSizeImgBoard\"\r\n      className=\"z-0 overflow-hidden w-full h-screen fixed top-0 left-0 bg-gray-800 flex justify-center items-center opacity-0 \"\r\n    >\r\n      <img\r\n        src={detailImgs[imgIndex].source}\r\n        className=\"max-w-full max-h-full\"\r\n        alt=\"Img\"\r\n        title=\"Img\"\r\n      />\r\n      {detailImgs && detailImgs.length !== 0 && (\r\n        <div className=\"bg-transparent py-5 px-3 flex justify-center items-center absolute bottom-0 left-0 right-0 mx-auto flex-wrap\">\r\n          {detailImgs.map((eachImg, index) => (\r\n            <FontAwesomeIcon\r\n              key={index}\r\n              id={`imgPagination${index}`}\r\n              icon={faCircle}\r\n              className=\"text-base md:text-xl text-black mx-5 my-3\"\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n      <FontAwesomeIcon\r\n        icon={faChevronLeft}\r\n        onClick={onClickToLeft}\r\n        className=\"absolute top-0 bottom-0 left-0 my-auto text-5xl mx-5 text-amber-300 cursor-pointer\"\r\n      />\r\n      <FontAwesomeIcon\r\n        icon={faChevronRight}\r\n        onClick={onClickToRight}\r\n        className=\"absolute top-0 bottom-0 right-0 my-auto text-5xl mx-5 text-amber-300 cursor-pointer\"\r\n      />\r\n      <FontAwesomeIcon\r\n        onClick={onClickToExit}\r\n        icon={faTimes}\r\n        className=\"absolute top-0 right-0 text-5xl text-amber-300 mx-5 my-5 cursor-pointer\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\SellingHistory.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\BackButton.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\EditProfile.tsx",["207","208","209","210"],"import { gql, useMutation } from \"@apollo/client\";\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { data } from \"autoprefixer\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { BackButton } from \"../components/BackButton\";\r\nimport { BUCKET_NAME } from \"../constants\";\r\nimport { useMe } from \"../hooks/useMe\";\r\nimport {\r\n  editProfile,\r\n  editProfileVariables,\r\n} from \"../__generated__/editProfile\";\r\n\r\ninterface IParams {\r\n  id: string;\r\n}\r\n\r\ninterface IFormParams {\r\n  editProfileUserAvatar?: FileList | null;\r\n  username?: string | null;\r\n  password?: string | null;\r\n}\r\n\r\nconst EDIT_USER_PROFILE = gql`\r\n  mutation editProfile($input: EditProfileInput!) {\r\n    editProfile(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const EditProfile = () => {\r\n  const { data: userData } = useMe();\r\n  const { register, getValues, setValue } = useForm<IFormParams>();\r\n  const { id } = useParams<IParams>();\r\n  const history = useHistory();\r\n  const [previewImage, setPreviewImage] = useState<string>(\"\");\r\n  const onCompleted = (data: editProfile) => {\r\n    const {\r\n      editProfile: { error, ok },\r\n    } = data;\r\n    if (ok) {\r\n      alert(\"프로필 수정이 성공적으로 완료되었습니다.\");\r\n      history.goBack();\r\n    }\r\n    if (!ok && error) {\r\n      alert(error);\r\n    }\r\n  };\r\n  const [editProfileMutation] = useMutation<editProfile, editProfileVariables>(\r\n    EDIT_USER_PROFILE,\r\n    { onCompleted }\r\n  );\r\n\r\n  const onInputPicture = () => {\r\n    const { editProfileUserAvatar } = getValues();\r\n\r\n    if (editProfileUserAvatar && editProfileUserAvatar.length !== 0) {\r\n      const file = editProfileUserAvatar.item(0);\r\n      const fileUrl = URL.createObjectURL(file);\r\n      setPreviewImage(fileUrl);\r\n    }\r\n    if (editProfileUserAvatar && editProfileUserAvatar.length === 0) {\r\n      setPreviewImage((prev) => prev);\r\n    }\r\n  };\r\n\r\n  const onClickToSave = async () => {\r\n    const { editProfileUserAvatar, password, username } = getValues();\r\n    let fileUrl: string = \"\";\r\n\r\n    if (editProfileUserAvatar && editProfileUserAvatar.length !== 0) {\r\n      // if previous avatar img exists then delete it from aws_s3 and update\r\n      if (userData?.me?.user?.avatarImg) {\r\n        const key = userData.me.user.avatarImg.split(\"/\")[3];\r\n        console.log(\"key\", key);\r\n        const data: { bucket: string; key: string } = {\r\n          bucket: BUCKET_NAME,\r\n          key,\r\n        };\r\n\r\n        const {\r\n          data: axiosData,\r\n        }: { data: { deleted: boolean; error?: string } } = await axios({\r\n          method: \"DELETE\",\r\n          url: \"http://localhost:4000/uploads\",\r\n          data,\r\n        });\r\n        if (!axiosData.deleted) {\r\n          console.log(axiosData.error);\r\n          throw Error(\"axios delete method not fulfilled\");\r\n        }\r\n      }\r\n\r\n      const formImgData = new FormData();\r\n      Object.values(editProfileUserAvatar).forEach((eachImg) =>\r\n        formImgData.append(\"uploads\", eachImg)\r\n      );\r\n      const {\r\n        data,\r\n      }: { data: { uploaded: boolean; url: string }[] } = await axios({\r\n        method: \"POST\",\r\n        url: \"http://localhost:4000/uploads\",\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n        data: formImgData,\r\n      });\r\n      if (data && data[0].uploaded === true) {\r\n        fileUrl = data[0].url;\r\n      }\r\n    }\r\n\r\n    await editProfileMutation({\r\n      variables: {\r\n        input: {\r\n          userId: +id,\r\n          ...(fileUrl !== \"\" && { avatarImg: fileUrl }),\r\n          ...(password && { password }),\r\n          ...(username && { username }),\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userData?.me.user) {\r\n      if (userData.me.user.id !== +id) {\r\n        history.goBack();\r\n      }\r\n    }\r\n    if (userData?.me.user?.username) {\r\n      setValue(\"username\", userData?.me.user?.username);\r\n    }\r\n  }, [userData]);\r\n\r\n  return (\r\n    <div>\r\n      <BackButton />\r\n      <div className=\"max-w-screen-lg  min-h-screen  lg:mx-auto \">\r\n        <div>\r\n          <label\r\n            htmlFor=\"editProfileUserAvatar\"\r\n            className=\"cursor-pointer h-96 bg-indigo-600 flex justify-center items-center\"\r\n          >\r\n            {previewImage && (\r\n              <img src={previewImage} className=\"max-h-full  max-w-full\" />\r\n            )}\r\n            {userData?.me.user?.avatarImg && !Boolean(previewImage) && (\r\n              <img\r\n                src={userData?.me.user?.avatarImg}\r\n                className=\"max-h-full  max-w-full\"\r\n              />\r\n            )}\r\n            {!Boolean(previewImage) && !userData?.me.user?.avatarImg && (\r\n              <FontAwesomeIcon\r\n                icon={faPlus}\r\n                className=\"text-7xl text-indigo-500\"\r\n              />\r\n            )}\r\n          </label>\r\n          <input\r\n            onInput={onInputPicture}\r\n            ref={register}\r\n            className=\"absolute w-0 h-0 opacity-0\"\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            name=\"editProfileUserAvatar\"\r\n            id=\"editProfileUserAvatar\"\r\n          />\r\n        </div>\r\n        <div className=\"flex flex-col p-5 bg-indigo-700\">\r\n          <input\r\n            ref={register}\r\n            name=\"username\"\r\n            placeholder=\"닉네임\"\r\n            className=\" mb-3 py-5 px-3 md:text-xl focus:outline-none bg-indigo-500 text-white placeholder-gray-200\"\r\n          />\r\n          <input\r\n            ref={register}\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"비밀번호\"\r\n            className=\" py-5 px-3 md:text-xl focus:outline-none bg-indigo-500 text-white placeholder-gray-200\"\r\n          />\r\n          <button\r\n            onClick={onClickToSave}\r\n            className=\"self-end py-3 px-10 bg-teal-500 text-gray-200 font-semibold mt-3\"\r\n          >\r\n            저장\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\avatarFullsize.tsx",["211"],"import { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useEffect, useRef } from \"react\";\r\n\r\ninterface IProps {\r\n  avatarUrl: string;\r\n  fullsizeMode: boolean;\r\n  setFullsizeMode: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nexport const AvatarFullsize: React.FC<IProps> = ({\r\n  avatarUrl,\r\n  fullsizeMode,\r\n  setFullsizeMode,\r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const onClickToExit = () => {\r\n    setFullsizeMode(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (fullsizeMode) {\r\n      if (containerRef.current) {\r\n        containerRef.current.style.display = \"flex\";\r\n      }\r\n    } else {\r\n      if (containerRef.current) {\r\n        containerRef.current.style.display = \"hidden\";\r\n      }\r\n    }\r\n  }, [fullsizeMode]);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className=\"fixed top-0 left-0 w-full h-screen items-center justify-center hidden z-50 bg-gray-800\"\r\n    >\r\n      <img src={avatarUrl} className=\"max-w-full max-h-full\" />\r\n      <FontAwesomeIcon\r\n        onClick={onClickToExit}\r\n        className=\"absolute top-0 right-0 text-5xl text-amber-300 mx-5 my-5 cursor-pointer\"\r\n        icon={faTimes}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\FormError.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\EditProduct.tsx",["212","213","214","215"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { useMe } from \"../hooks/useMe\";\r\nimport { allCategories } from \"../__generated__/allCategories\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { PointPercent } from \"../__generated__/globalTypes\";\r\nimport { FormError } from \"../components/FormError\";\r\nimport { numberWithCommas } from \"../utils\";\r\nimport { ALL_CATEGORIES_QUERY } from \"./CreateProduct\";\r\nimport { PRODUCTS_FRAGMENT } from \"../fragment\";\r\nimport {\r\n  editProductProductQuery,\r\n  editProductProductQueryVariables,\r\n} from \"../__generated__/editProductProductQuery\";\r\nimport {\r\n  editProduct,\r\n  editProductVariables,\r\n} from \"../__generated__/editProduct\";\r\nimport { ImgGrid } from \"../components/ImgGrid\";\r\nimport { BackButton } from \"../components/BackButton\";\r\nimport { FormButton } from \"../components/FormButton\";\r\nimport { FIND_PRODUCT_BY_ID_QUERY } from \"./Product\";\r\n\r\nexport const EDIT_PRODUCT_PRODUCT_QUERY = gql`\r\n  query editProductProductQuery($productId: Float!) {\r\n    findProductById(productId: $productId) {\r\n      ok\r\n      error\r\n      product {\r\n        ...productsParts\r\n        seller {\r\n          id\r\n          username\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ${PRODUCTS_FRAGMENT}\r\n`;\r\n\r\nexport const EDIT_PRODUCT_MUTATION = gql`\r\n  mutation editProduct($input: EditProductInput!) {\r\n    editProduct(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IParams {\r\n  id: string;\r\n}\r\n\r\ninterface IFormProps {\r\n  productName: string;\r\n  productPrice: string;\r\n  category: string;\r\n}\r\n\r\nexport const EditProduct = () => {\r\n  const { id } = useParams<IParams>();\r\n  const descriptionDivRef = useRef<HTMLDivElement>(null);\r\n  const { data: userData, loading: userLoading } = useMe();\r\n  const { data: categoriesData } = useQuery<allCategories>(\r\n    ALL_CATEGORIES_QUERY\r\n  );\r\n  const { data: productData } = useQuery<\r\n    editProductProductQuery,\r\n    editProductProductQueryVariables\r\n  >(EDIT_PRODUCT_PRODUCT_QUERY, { variables: { productId: +id } });\r\n  const [imgUrls, setImgUrls] = useState<string[]>([]);\r\n  const [exitImgGrid, setExitImgGrid] = useState(true);\r\n\r\n  const onCompleted = (data: editProduct) => {\r\n    const {\r\n      editProduct: { ok, error },\r\n    } = data;\r\n    if (ok) {\r\n      alert(\"업데이트 성공!\");\r\n      history.push(`/product/${id}`);\r\n    } else {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  const [editProductMutation, { loading: editProductLoading }] = useMutation<\r\n    editProduct,\r\n    editProductVariables\r\n  >(EDIT_PRODUCT_MUTATION, { onCompleted });\r\n\r\n  const history = useHistory();\r\n  const {\r\n    register,\r\n    getValues,\r\n    handleSubmit,\r\n    errors,\r\n    formState,\r\n    setValue,\r\n  } = useForm<IFormProps>({\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  const onSubmit = async () => {\r\n    const { category, productName } = getValues();\r\n    const description = descriptionDivRef.current?.innerHTML;\r\n\r\n    await editProductMutation({\r\n      variables: {\r\n        input: {\r\n          productId: +id,\r\n          categorySlug: category,\r\n          ...(description && { description }),\r\n          ...(productName && { name: productName }),\r\n        },\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: FIND_PRODUCT_BY_ID_QUERY,\r\n          variables: {\r\n            productId: +id,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const generatePointPercentOption = (value: PointPercent) => {\r\n    if (value === PointPercent.full) {\r\n      return \"가격의 100%\";\r\n    }\r\n    if (value === PointPercent.half) {\r\n      return \"가격의 50%\";\r\n    }\r\n    if (value === PointPercent.one) {\r\n      return \"가격의 1%\";\r\n    }\r\n    if (value === PointPercent.ten) {\r\n      return \"가격의 10%\";\r\n    }\r\n    if (value === PointPercent.zeroDotOne) {\r\n      return \"가격의 0.1%\";\r\n    }\r\n  };\r\n\r\n  const setProductValueToInput = () => {\r\n    if (productData?.findProductById.product) {\r\n      console.log(\"setProductValueToInput\");\r\n      const originalCategory =\r\n        productData.findProductById.product.category.slug;\r\n      const originalName = productData.findProductById.product.name;\r\n      const originalPrice = productData.findProductById.product.price;\r\n      const originalDescription =\r\n        productData.findProductById.product.description;\r\n\r\n      setValue(\"category\", originalCategory);\r\n      setValue(\"productName\", originalName);\r\n      setValue(\"productPrice\", originalPrice);\r\n\r\n      if (descriptionDivRef.current && originalDescription) {\r\n        descriptionDivRef.current.innerHTML = originalDescription;\r\n      }\r\n\r\n      if (productData?.findProductById.product?.detailImgs) {\r\n        const detailImgs = productData?.findProductById.product?.detailImgs;\r\n        let imgUrlContainer: string[] = [];\r\n        detailImgs.forEach((eachImg) => {\r\n          imgUrlContainer.push(eachImg.source);\r\n        });\r\n        setImgUrls([...imgUrlContainer]);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!userLoading && userData?.me.user?.isVerified === false) {\r\n      history.push(\"/not-valid-user\");\r\n    }\r\n\r\n    if (userData?.me.user && productData?.findProductById.product) {\r\n      if (\r\n        userData?.me.user.id !== productData?.findProductById.product.seller.id\r\n      ) {\r\n        alert(\"접근 권한이 없습니다.\");\r\n        history.push(`/product/${id}`);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setProductValueToInput();\r\n  }, [productData]);\r\n\r\n  useEffect(() => {\r\n    if (exitImgGrid) {\r\n      console.log(\"refetchProduct\");\r\n      setProductValueToInput();\r\n    }\r\n  }, [exitImgGrid]);\r\n\r\n  if (productData?.findProductById.error) {\r\n    return (\r\n      <div className=\"w-full h-screen flex flex-col justify-center items-center\">\r\n        <h1 className=\"text-amber-300 text-3xl font-bold\">\r\n          {productData?.findProductById.error}\r\n        </h1>\r\n        <Link className=\"mt-10 text-gray-200 hover:underline text-xl\" to=\"/\">\r\n          홈으로 돌아가기\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {!exitImgGrid ? (\r\n        <ImgGrid\r\n          productId={+id}\r\n          useFor=\"EDIT\"\r\n          originalImgs={imgUrls.slice()}\r\n          exitImgGrid={exitImgGrid}\r\n          setExitImgGrid={setExitImgGrid}\r\n        />\r\n      ) : (\r\n        <>\r\n          <BackButton />\r\n          <div className=\"max-w-screen-2xl min-h-screen mx-12 2xl:mx-auto shadow-2xl\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <div\r\n                onClick={() => setExitImgGrid(false)}\r\n                className=\" h-64 md:h-96 bg-indigo-800 w-full  cursor-pointer flex justify-center items-center\"\r\n              >\r\n                {productData?.findProductById.product?.bigImg ? (\r\n                  <img\r\n                    className=\"max-w-full max-h-full\"\r\n                    src={productData.findProductById.product.bigImg}\r\n                  />\r\n                ) : (\r\n                  <FontAwesomeIcon\r\n                    icon={faPlus}\r\n                    className=\"text-5xl text-indigo-500\"\r\n                  />\r\n                )}\r\n              </div>\r\n              <div className=\"grid grid-cols-5 grid-rows-4 md:grid-rows-2 bg-indigo-600 \">\r\n                <div className=\"col-start-1 col-span-5 md:col-start-1 md:col-span-3\">\r\n                  <input\r\n                    ref={register}\r\n                    type=\"text\"\r\n                    name=\"productName\"\r\n                    placeholder=\"상품 이름 \"\r\n                    className=\"w-full py-8 md:py-10 px-5 text-xs md:text-xl focus:outline-none bg-indigo-600 text-white  \"\r\n                  />\r\n                </div>\r\n                <div className=\" bg-indigo-600 row-start-2 row-span-1 col-start-1 col-span-5 md:col-start-1 md:col-span-3 md:row-start-2 md:row-span-1\">\r\n                  <div className=\"w-full py-8 md:py-10 px-5 text-xs md:text-xl focus:outline-none bg-indigo-600 text-white cursor-not-allowed \">\r\n                    {productData?.findProductById.product?.price && (\r\n                      <span className=\"text-amber-300 font-semibold\">\r\n                        {numberWithCommas(\r\n                          productData?.findProductById.product?.price\r\n                        )}\r\n                        원\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                  {errors.productPrice?.message && (\r\n                    <FormError errorMsg={errors.productPrice?.message} />\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"col-span-full row-start-3 row-span-1 md:col-start-4 md:col-span-2 md:row-start-1 md:row-span-1\">\r\n                  <select\r\n                    ref={register}\r\n                    name=\"category\"\r\n                    className=\"bg-indigo-400 text-xs md:text-xl font-semibold text-amber-300 focus:outline-none w-full h-full \"\r\n                  >\r\n                    {categoriesData?.allCategories.categories &&\r\n                      categoriesData?.allCategories.categories.map(\r\n                        (category, index) => (\r\n                          <option key={index} className=\"text-white \">\r\n                            {category.slug}\r\n                          </option>\r\n                        )\r\n                      )}\r\n                  </select>\r\n                </div>\r\n                <div className=\"col-span-full row-start-4 row-span-1 md:col-start-4 md:col-span-2 md:row-start-2 md:row-span-1\">\r\n                  <div className=\"bg-indigo-500 focus:outline-none text-xs md:text-xl font-semibold text-amber-300 w-full h-full flex justify-start items-center pl-2 cursor-not-allowed\">\r\n                    {productData?.findProductById.product?.pointPercent &&\r\n                      generatePointPercentOption(\r\n                        productData?.findProductById.product?.pointPercent\r\n                      )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\" py-12 px-10 bg-indigo-800\">\r\n                <div\r\n                  ref={descriptionDivRef}\r\n                  className=\"w-full rounded-lg px-5 py-5 focus:outline-none bg-indigo-100 text-black text-sm md:text-xl\"\r\n                  contentEditable={true}\r\n                  style={{ minHeight: \"500px\" }}\r\n                />\r\n              </div>\r\n              <div className=\"py-10 flex justify-center items-center \">\r\n                <FormButton\r\n                  btnText={\"수정\"}\r\n                  isValid={formState.isValid}\r\n                  loading={editProductLoading}\r\n                />\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\ImgGrid.tsx",["216"],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\constants.ts",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\FormButton.tsx",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\MsgRoomStick.tsx",["217"],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\pages\\MsgRoom.tsx",["218","219"],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\msgBlock.tsx",["220","221"],"import { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useMe } from \"../hooks/useMe\";\r\ninterface IProps {\r\n  fromUser: any;\r\n  toUser: any;\r\n  msgText: string;\r\n}\r\n\r\nenum MsgType {\r\n  RECEIVE = \"RECEIVE\",\r\n  SEND = \"SEND\",\r\n}\r\n\r\nexport const MsgBlock: React.FC<IProps> = ({ fromUser, msgText, toUser }) => {\r\n  const { data: userData } = useMe();\r\n  const [msgType, setMsgType] = useState<MsgType | null>(null);\r\n  useEffect(() => {\r\n    if (userData?.me.user) {\r\n      if (userData.me.user.id === fromUser.id) {\r\n        setMsgType(MsgType.SEND);\r\n      }\r\n      if (userData.me.user.id === toUser.id) {\r\n        setMsgType(MsgType.RECEIVE);\r\n      }\r\n    }\r\n  }, [userData]);\r\n  return (\r\n    <div\r\n      className={`flex my-5 mx-5 ${\r\n        msgType === MsgType.SEND ? \"self-end\" : \"self-start\"\r\n      }`}\r\n    >\r\n      {msgType === MsgType.RECEIVE && (\r\n        <Link to={`/users/${fromUser.id}`}>\r\n          <img\r\n            style={{ minWidth: \"3.5rem\" }}\r\n            className=\"w-14 h-14 border-4 rounded-full mr-5 border-gray-200\"\r\n            src={fromUser.avatarImg}\r\n          />\r\n        </Link>\r\n      )}\r\n      <div\r\n        className={`p-5  rounded-xl max-w-xs ${\r\n          msgType === MsgType.SEND ? \"bg-amber-300 \" : \"bg-gray-200\"\r\n        }`}\r\n      >\r\n        {msgText}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\__generated__\\globalTypes.ts",[],"C:\\Users\\chldu\\Desktop\\front-end-practice\\src\\components\\newMsg.tsx",[],{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","severity":1,"message":"227","line":144,"column":6,"nodeType":"228","endLine":144,"endColumn":27,"suggestions":"229"},{"ruleId":"230","severity":1,"message":"231","line":2,"column":15,"nodeType":"232","messageId":"233","endLine":2,"endColumn":30},{"ruleId":"230","severity":1,"message":"234","line":6,"column":10,"nodeType":"232","messageId":"233","endLine":6,"endColumn":20},{"ruleId":"230","severity":1,"message":"235","line":9,"column":10,"nodeType":"232","messageId":"233","endLine":9,"endColumn":14},{"ruleId":"236","severity":1,"message":"237","line":74,"column":34,"nodeType":"238","messageId":"239","endLine":74,"endColumn":35,"suggestions":"240"},{"ruleId":"236","severity":1,"message":"237","line":74,"column":59,"nodeType":"238","messageId":"239","endLine":74,"endColumn":60,"suggestions":"241"},{"ruleId":"230","severity":1,"message":"234","line":5,"column":10,"nodeType":"232","messageId":"233","endLine":5,"endColumn":20},{"ruleId":"236","severity":1,"message":"237","line":82,"column":34,"nodeType":"238","messageId":"239","endLine":82,"endColumn":35,"suggestions":"242"},{"ruleId":"236","severity":1,"message":"237","line":82,"column":59,"nodeType":"238","messageId":"239","endLine":82,"endColumn":60,"suggestions":"243"},{"ruleId":"226","severity":1,"message":"244","line":49,"column":6,"nodeType":"228","endLine":49,"endColumn":8,"suggestions":"245"},{"ruleId":"226","severity":1,"message":"246","line":56,"column":6,"nodeType":"228","endLine":56,"endColumn":8,"suggestions":"247"},{"ruleId":"230","severity":1,"message":"248","line":1,"column":10,"nodeType":"232","messageId":"233","endLine":1,"endColumn":20},{"ruleId":"230","severity":1,"message":"249","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":15},{"ruleId":"230","severity":1,"message":"250","line":8,"column":3,"nodeType":"232","messageId":"233","endLine":8,"endColumn":16},{"ruleId":"226","severity":1,"message":"251","line":95,"column":6,"nodeType":"228","endLine":95,"endColumn":16,"suggestions":"252"},{"ruleId":"253","severity":1,"message":"254","line":107,"column":19,"nodeType":"255","endLine":109,"endColumn":20},{"ruleId":"253","severity":1,"message":"254","line":157,"column":19,"nodeType":"255","endLine":159,"endColumn":20},{"ruleId":"253","severity":1,"message":"254","line":200,"column":17,"nodeType":"255","endLine":202,"endColumn":18},{"ruleId":"253","severity":1,"message":"254","line":208,"column":17,"nodeType":"255","endLine":210,"endColumn":18},{"ruleId":"230","severity":1,"message":"256","line":11,"column":3,"nodeType":"232","messageId":"233","endLine":11,"endColumn":9},{"ruleId":"230","severity":1,"message":"257","line":13,"column":3,"nodeType":"232","messageId":"233","endLine":13,"endColumn":9},{"ruleId":"226","severity":1,"message":"258","line":123,"column":6,"nodeType":"228","endLine":123,"endColumn":12,"suggestions":"259"},{"ruleId":"226","severity":1,"message":"260","line":133,"column":6,"nodeType":"228","endLine":133,"endColumn":8,"suggestions":"261"},{"ruleId":"226","severity":1,"message":"262","line":46,"column":6,"nodeType":"228","endLine":46,"endColumn":16,"suggestions":"263"},{"ruleId":"226","severity":1,"message":"264","line":50,"column":6,"nodeType":"228","endLine":50,"endColumn":8,"suggestions":"265"},{"ruleId":"226","severity":1,"message":"258","line":105,"column":6,"nodeType":"228","endLine":105,"endColumn":22,"suggestions":"266"},{"ruleId":"226","severity":1,"message":"258","line":111,"column":6,"nodeType":"228","endLine":111,"endColumn":16,"suggestions":"267"},{"ruleId":"230","severity":1,"message":"234","line":4,"column":10,"nodeType":"232","messageId":"233","endLine":4,"endColumn":20},{"ruleId":"226","severity":1,"message":"262","line":171,"column":6,"nodeType":"228","endLine":171,"endColumn":16,"suggestions":"268"},{"ruleId":"269","severity":1,"message":"270","line":381,"column":11,"nodeType":"271","endLine":384,"endColumn":12},{"ruleId":"230","severity":1,"message":"272","line":15,"column":3,"nodeType":"232","messageId":"233","endLine":15,"endColumn":15},{"ruleId":"230","severity":1,"message":"273","line":78,"column":35,"nodeType":"232","messageId":"233","endLine":78,"endColumn":41},{"ruleId":"230","severity":1,"message":"274","line":103,"column":9,"nodeType":"232","messageId":"233","endLine":103,"endColumn":33},{"ruleId":"226","severity":1,"message":"275","line":218,"column":6,"nodeType":"228","endLine":218,"endColumn":8,"suggestions":"276"},{"ruleId":"277","severity":1,"message":"278","line":263,"column":17,"nodeType":"271","endLine":263,"endColumn":80},{"ruleId":"230","severity":1,"message":"279","line":1,"column":21,"nodeType":"232","messageId":"233","endLine":1,"endColumn":27},{"ruleId":"230","severity":1,"message":"235","line":4,"column":10,"nodeType":"232","messageId":"233","endLine":4,"endColumn":14},{"ruleId":"226","severity":1,"message":"280","line":137,"column":6,"nodeType":"228","endLine":137,"endColumn":16,"suggestions":"281"},{"ruleId":"277","severity":1,"message":"278","line":149,"column":15,"nodeType":"271","endLine":149,"endColumn":76},{"ruleId":"277","severity":1,"message":"278","line":152,"column":15,"nodeType":"271","endLine":155,"endColumn":17},{"ruleId":"277","severity":1,"message":"278","line":38,"column":7,"nodeType":"271","endLine":38,"endColumn":64},{"ruleId":"226","severity":1,"message":"282","line":190,"column":6,"nodeType":"228","endLine":190,"endColumn":8,"suggestions":"283"},{"ruleId":"226","severity":1,"message":"284","line":194,"column":6,"nodeType":"228","endLine":194,"endColumn":19,"suggestions":"285"},{"ruleId":"226","severity":1,"message":"284","line":201,"column":6,"nodeType":"228","endLine":201,"endColumn":19,"suggestions":"286"},{"ruleId":"277","severity":1,"message":"278","line":236,"column":19,"nodeType":"271","endLine":239,"endColumn":21},{"ruleId":"226","severity":1,"message":"287","line":243,"column":6,"nodeType":"228","endLine":243,"endColumn":8,"suggestions":"288"},{"ruleId":"277","severity":1,"message":"278","line":38,"column":9,"nodeType":"271","endLine":41,"endColumn":11},{"ruleId":"226","severity":1,"message":"289","line":155,"column":6,"nodeType":"228","endLine":155,"endColumn":19,"suggestions":"290"},{"ruleId":"226","severity":1,"message":"291","line":161,"column":6,"nodeType":"228","endLine":161,"endColumn":8,"suggestions":"292"},{"ruleId":"226","severity":1,"message":"293","line":27,"column":6,"nodeType":"228","endLine":27,"endColumn":16,"suggestions":"294"},{"ruleId":"277","severity":1,"message":"278","line":36,"column":11,"nodeType":"271","endLine":40,"endColumn":13},"no-native-reassign",["295"],"no-negated-in-lhs",["296"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: '_newMsgManager', 'refetchMe', and 'userData.me.user.msgRooms'. Either include them or remove the dependency array.","ArrayExpression",["297"],"@typescript-eslint/no-unused-vars","'useApolloClient' is defined but never used.","Identifier","unusedVar","'isLoggedIn' is defined but never used.","'data' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["298","299"],["300","301"],["302","303"],["304","305"],"React Hook useEffect has missing dependencies: 'page' and 'refetch'. Either include them or remove the dependency array.",["306"],"React Hook useEffect has missing dependencies: 'code' and 'confirmVerificationCodeMutation'. Either include them or remove the dependency array.",["307"],"'useHistory' is defined but never used.","'useMe' is defined but never used.","'faCommentDots' is defined but never used.","React Hook useEffect has a missing dependency: 'triggerMenu'. Either include it or remove the dependency array.",["308"],"react/style-prop-object","Style prop value must be an object","JSXAttribute","'faPlus' is defined but never used.","'faEdit' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["309"],"React Hook useEffect has missing dependencies: 'data?.me.user?.id', 'refetch', 'refetchMe', and 'sellingProductHistoryQuery'. Either include them or remove the dependency array.",["310"],"React Hook useEffect has missing dependencies: 'history' and 'userLoading'. Either include them or remove the dependency array.",["311"],"React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.",["312"],["313"],["314"],["315"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'faArrowRight' is defined but never used.","'called' is assigned a value but never used.","'onClickPreviewImageRight' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history', 'userData?.me.user?.isVerified', and 'userLoading'. Either include them or remove the dependency array.",["316"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'id', and 'setValue'. Either include them or remove the dependency array.",["317"],"React Hook useEffect has missing dependencies: 'history', 'id', 'productData?.findProductById.product', 'userData?.me.user', and 'userLoading'. Either include them or remove the dependency array.",["318"],"React Hook useEffect has a missing dependency: 'setProductValueToInput'. Either include it or remove the dependency array.",["319"],["320"],"React Hook useEffect has a missing dependency: 'originalImgs'. Either include it or remove the dependency array. If 'setImgGrid' needs the current value of 'originalImgs', you can also switch to useReducer instead of useState and read 'originalImgs' in the reducer.",["321"],"React Hook useEffect has missing dependencies: '_newMsgManager', 'id', and 'subscribeToMore'. Either include them or remove the dependency array.",["322"],"React Hook useEffect has missing dependencies: 'id' and 'refetchMsgRoom'. Either include them or remove the dependency array.",["323"],"React Hook useEffect has missing dependencies: 'fromUser.id' and 'toUser.id'. Either include them or remove the dependency array.",["324"],"no-global-assign","no-unsafe-negation",{"desc":"325","fix":"326"},{"messageId":"327","fix":"328","desc":"329"},{"messageId":"330","fix":"331","desc":"332"},{"messageId":"327","fix":"333","desc":"329"},{"messageId":"330","fix":"334","desc":"332"},{"messageId":"327","fix":"335","desc":"329"},{"messageId":"330","fix":"336","desc":"332"},{"messageId":"327","fix":"337","desc":"329"},{"messageId":"330","fix":"338","desc":"332"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"349","fix":"357"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},"Update the dependencies array to be: [_newMsgManager, receiveMsgCountData, refetchMe, userData.me.user.msgRooms]",{"range":"376","text":"377"},"removeEscape",{"range":"378","text":"379"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"380","text":"381"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"382","text":"379"},{"range":"383","text":"381"},{"range":"384","text":"379"},{"range":"385","text":"381"},{"range":"386","text":"379"},{"range":"387","text":"381"},"Update the dependencies array to be: [page, refetch]",{"range":"388","text":"389"},"Update the dependencies array to be: [code, confirmVerificationCodeMutation]",{"range":"390","text":"391"},"Update the dependencies array to be: [location, triggerMenu]",{"range":"392","text":"393"},"Update the dependencies array to be: [data, history]",{"range":"394","text":"395"},"Update the dependencies array to be: [data?.me.user?.id, refetch, refetchMe, sellingProductHistoryQuery]",{"range":"396","text":"397"},"Update the dependencies array to be: [history, userData, userLoading]",{"range":"398","text":"399"},"Update the dependencies array to be: [refetch]",{"range":"400","text":"401"},"Update the dependencies array to be: [userData, data, history]",{"range":"402","text":"403"},"Update the dependencies array to be: [history, userData]",{"range":"404","text":"405"},{"range":"406","text":"399"},"Update the dependencies array to be: [history, userData?.me.user?.isVerified, userLoading]",{"range":"407","text":"408"},"Update the dependencies array to be: [history, id, setValue, userData]",{"range":"409","text":"410"},"Update the dependencies array to be: [history, id, productData?.findProductById.product, userData?.me.user, userLoading]",{"range":"411","text":"412"},"Update the dependencies array to be: [productData, setProductValueToInput]",{"range":"413","text":"414"},"Update the dependencies array to be: [exitImgGrid, setProductValueToInput]",{"range":"415","text":"416"},"Update the dependencies array to be: [originalImgs]",{"range":"417","text":"418"},"Update the dependencies array to be: [_newMsgManager, id, msgRoomData, subscribeToMore]",{"range":"419","text":"420"},"Update the dependencies array to be: [id, refetchMsgRoom]",{"range":"421","text":"422"},"Update the dependencies array to be: [fromUser.id, toUser.id, userData]",{"range":"423","text":"424"},[3589,3610],"[_newMsgManager, receiveMsgCountData, refetchMe, userData.me.user.msgRooms]",[2167,2168],"",[2167,2167],"\\",[2192,2193],[2192,2192],[2276,2277],[2276,2276],[2301,2302],[2301,2301],[1317,1319],"[page, refetch]",[1570,1572],"[code, confirmVerificationCodeMutation]",[2689,2699],"[location, triggerMenu]",[3604,3610],"[data, history]",[3822,3824],"[data?.me.user?.id, refetch, refetchMe, sellingProductHistoryQuery]",[1279,1289],"[history, userData, userLoading]",[1337,1339],"[refetch]",[3215,3231],"[userData, data, history]",[3362,3372],"[history, userData]",[4796,4806],[6328,6330],"[history, userData?.me.user?.isVerified, userLoading]",[4066,4076],"[history, id, setValue, userData]",[5555,5557],"[history, id, productData?.findProductById.product, userData?.me.user, userLoading]",[5620,5633],"[productData, setProductValueToInput]",[5767,5780],"[exitImgGrid, setProductValueToInput]",[7365,7367],"[originalImgs]",[4460,4473],"[_newMsgManager, id, msgRoomData, subscribeToMore]",[4584,4586],"[id, refetchMsgRoom]",[707,717],"[fromUser.id, toUser.id, userData]"]